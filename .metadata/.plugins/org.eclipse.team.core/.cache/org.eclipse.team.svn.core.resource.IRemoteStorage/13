
package kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.service.impl; 

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.annotation.Resource;

import jxl.Sheet;
import jxl.Workbook;
import kr.or.dkcns.base.cmm.CustomerCode;
import kr.or.dkcns.base.cmm.util.EgovExcelUtil;
import kr.or.dkcns.base.cmm.vo.DkMap;
import kr.or.dkcns.kita.bsnsreqstmanage.bsnsreqstmanage.vo.CorporateMstVO;
import kr.or.dkcns.kita.bsnsreqstmanage.bsnsreqstmanage.vo.PersonMstVO;
import kr.or.dkcns.kita.cmm.excelupload.service.DkExcelService;
import kr.or.dkcns.kita.cmm.sql.service.DkSQLService;
import kr.or.dkcns.kita.cmm.util.UtilManager;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.dao.CstmrinqireDao;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.service.CstmrinqireService;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.vo.ContactsttusregistVO;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.vo.CstmrIndividualCustomerVO;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.vo.CstmrReqDataVO;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.vo.CstmrreqstinqireVO;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrinqire.vo.IndividualCstmrinqireVO;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrregist.dao.IndvdlcstmrregistDao;
import kr.or.dkcns.kita.cstmrinfomanage.cstmrregist.vo.IndvdlcstmrregistVO;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import egovframework.rte.fdl.cmmn.EgovAbstractServiceImpl;
import egovframework.rte.psl.dataaccess.util.EgovMap;

/**
 * <pre>
 * kr.or.dkcns.kita.bsnsreqstmanage.bsnsreqstmanage.service.impl 
 * @Class Name : BsnsreqstinqireServiceImpl.java
 * @Description :  class
 * @Modification Information
 * </pre>
 * @author : Administrator
 * @date : 2017. 8. 21. 오후 2:08:35
 * @version : 1.0
 *  
 * @Copyright ⓒ 2016 Daekyo CNS, All Rights Reserved.
 * 
 * @history : 
 *	-----------------------------------------------------------------------
 *	변경일				작성자						변경내용  
 *	----------- ------------------- ---------------------------------------
 *	2017. 8. 21.		Administrator				최초 작성 
 *	-----------------------------------------------------------------------
 *  
 */
@Service("CstmrinqireService")
public class CstmrinqireServiceImpl extends EgovAbstractServiceImpl implements  CstmrinqireService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CstmrinqireServiceImpl.class);
    
    @Resource(name="CstmrinqireDao")
    private CstmrinqireDao cstmrinqireDao;
    
    @Resource(name="IndvdlcstmrregistDao")
    private IndvdlcstmrregistDao indvdlcstmrregistDao;
    
    /**
     * dkSQLService
     */
    @Resource(name = "dkSQLService")
    private DkSQLService dkSQLService;    
    

    @Resource(name = "dkExcelService")
    private DkExcelService dkExcelService;
    
    /**
     * messageSource
     */
    @Resource(name = "messageSource")
    private MessageSource egovMessageSource;   
    
    /**
     * txManager
     */
    @Resource(name = "txManager")
    private PlatformTransactionManager txManager;
    
    public List<EgovMap> selectCorpotationcustomersearchBassinfoList(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCorpotationcustomersearchBassinfoList(cstmrReqDataVO);
    }

    public int  selectCorpotationcustomersearchBassinfoListCount(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCorpotationcustomersearchBassinfoListCount(cstmrReqDataVO);
    }

    public List<EgovMap> corpotationcustomersearchImxprtAcmslt(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.corpotationcustomersearchImxprtAcmslt(cstmrReqDataVO);
    }

    public List<EgovMap> corpotationcustomersearchMberChartraccto(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.corpotationcustomersearchMberChartraccto(cstmrReqDataVO);
    }

    public List<EgovMap> KCodeSearchList(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.KCodeSearchList(cstmrReqDataVO);
    }
    
 
    /**
     * <pre>
     * 개요 : 법인고객기본정보 상세 조회
     * </pre>
     * @Method Name : selectCustomerInfoDetailInfo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param reqDataVO
     * @return
     * @throws Exception
     */     
    public CstmrreqstinqireVO selectCustomerInfoDetailInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoDetailInfo(cstmrReqDataVO);
    }    
    
    /*public List<EgovMap> selectCorporateFirmNoInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCorporateFirmNoInfo(cstmrReqDataVO);
    }*/
        
    public List<EgovMap> selectCustomerInfoOffice(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoOffice(cstmrReqDataVO);
    }
        
    public List<EgovMap> selectCustomerInfoOverseas(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoOverseas(cstmrReqDataVO);
    }
        
    public List<EgovMap> selectStatusTracking(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectStatusTracking(cstmrReqDataVO);
    }
    /*
    public List<EgovMap> selectCorporateStaffCustomerInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCorporateStaffCustomerInfo(cstmrReqDataVO);
    }*/
        
    public List<EgovMap> selectCustomerInfoContactPStatus(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoContactPStatus(cstmrIndividualCustomerVO);
    }
       /* 
    public List<EgovMap> selectCustomerInfoService(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoService(cstmrReqDataVO);
    }
        */
    public List<EgovMap> selectCustomerInfoFee(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoFee(cstmrReqDataVO);
    }

    public List<EgovMap> selectCustomerInfoTrade(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoTrade(cstmrReqDataVO);
    }
        
    public List<EgovMap> selectCustomerInfoProduct(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoProduct(cstmrReqDataVO);
    }

    public List<EgovMap> selectCustomerInfoFinance(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoFinance(cstmrReqDataVO);
    }
        
    public List<EgovMap> selectCustomerInfoInvest(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoInvest(cstmrReqDataVO);
    }
        
    public List<EgovMap> idInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.idInfoSelect(cstmrReqDataVO);
    }
        
    public List<EgovMap> getCompanyHistoryExcel(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.getCompanyHistoryExcel(cstmrReqDataVO);
    }
        
    
    public List<EgovMap> selectOpmBrdrInfmInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectOpmBrdrInfmInfo(cstmrReqDataVO);
    }
    
        
    public int getMemberInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.getMemberInfo(cstmrReqDataVO);
    }
        
    public EgovMap getFeeMemberInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.getFeeMemberInfo(cstmrReqDataVO);
    }    
    
    public List<EgovMap> getFYearInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        
        String strBankYear = cstmrinqireDao.getBankYearMember(cstmrReqDataVO);
        cstmrReqDataVO.setFeeBankYear(strBankYear);
        
        return cstmrinqireDao.getFYearInfo(cstmrReqDataVO);
    }    

    public CstmrreqstinqireVO getBankYearMember(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return new CstmrreqstinqireVO();//cstmrinqireDao.getBankYearMember(cstmrReqDataVO);
    }    

    public EgovMap getCustIdList(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.getCustIdList(cstmrReqDataVO);
    }    
 
    public String listCusChk(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.listCusChk(cstmrReqDataVO);
    }    
 
    public EgovMap compAllInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
      
        List<EgovMap> resultList = cstmrinqireDao.getSpMembertype(cstmrReqDataVO);
        String memberTypeSum = "";
        for (int i = 0; i < resultList.size(); i++) {
            memberTypeSum = memberTypeSum + resultList.get(i).get("memberType") + ",";
        }
        cstmrReqDataVO.setMemberType(memberTypeSum);
        
        if ("7".equals(cstmrReqDataVO.getMemberGbn()))
            return cstmrinqireDao.compAllKoInfoSelect(cstmrReqDataVO);
        else if ("8".equals(cstmrReqDataVO.getMemberGbn()))
            return cstmrinqireDao.compAllFoInfoSelect(cstmrReqDataVO);
        else
            return cstmrinqireDao.compAllInfoSelect(cstmrReqDataVO);
    }    
     
    public List<EgovMap> feeInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.feeInfoSelect(cstmrReqDataVO);
    }    
    
    public List<EgovMap> tradeInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.tradeInfoSelect(cstmrReqDataVO);
    }    
    
    public List<EgovMap> offInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.offInfoSelect(cstmrReqDataVO);
    }    
    
    
    public List<EgovMap> forInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.forInfoSelect(cstmrReqDataVO);
    }    
    
    
    public List<EgovMap> finInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.finInfoSelect(cstmrReqDataVO);
    }    
    
    
    public List<EgovMap> serInfoSelectPrize(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.serInfoSelectPrize(cstmrReqDataVO);
    }    
    
    
    public List<EgovMap> serInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.serInfoSelect(cstmrReqDataVO);
    }    
    
    
    public List<EgovMap> getCustMarketingList(String custId) throws Exception {
        return cstmrinqireDao.getCustMarketingList(custId);
    }    
    
    
    public List<EgovMap> custInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.custInfoSelect(cstmrReqDataVO);
    }    
    
    
    public String getcustId(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.getcustId(cstmrReqDataVO);
    }    
    
    /**
     * <pre>
     * 개요 : 개인고객조회 상세
     * </pre>
     * @Method Name : selectIndividualCustomerInfoDetail
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public CstmrIndividualCustomerVO selectIndividualCustomerInfoDetail(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectIndividualCustomerInfoDetail(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 관심지역 조회
     * </pre>
     * @Method Name : selectpersonInterestArea
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public CstmrIndividualCustomerVO selectpersonInterestArea(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectpersonInterestArea(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 서비스정보
     * </pre>
     * @Method Name : selectIndividualCustomerInfoService
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectIndividualCustomerInfoService(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectIndividualCustomerInfoService(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 캐리어패스정보
     * </pre>
     * @Method Name : selectCustomerInfoCareer
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerInfoCareer(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCareer(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 Contact 현황 정보
     * </pre>
     * @Method Name : selectIndividualCustomerInfoContactStatus
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectIndividualCustomerInfoContactStatus(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectIndividualCustomerInfoContactStatus(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 고객상담정보
     * </pre>
     * @Method Name : selectCustomerInfoConsult
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerInfoConsult(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoConsult(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 PERSON_SEQ 로 USER_ID 가져오기
     * </pre>
     * @Method Name : getUserId
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public String getUserId(String personSeq) throws Exception {
        return cstmrinqireDao.getUserId(personSeq);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 커리어패스 삭제
     * </pre>
     * @Method Name : deleteCareer
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int deleteCareer(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.deleteCareer(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 다중 전화번호/이메일 정보
     * </pre>
     * @Method Name : selectPrsonMstContact
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<Map<String,String>> selectPrsonMstContact(String personSeq) throws Exception {
        return cstmrinqireDao.selectPrsonMstContact(personSeq);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 추천/비추천 count
     * </pre>
     * @Method Name : selectRecommendation
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public Map<String,String> selectRecommendation(String personSeq) throws Exception {
        return cstmrinqireDao.selectRecommendation(personSeq);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 비서 정보 조회
     * </pre>
     * @Method Name : selectRecommendation
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public PersonMstVO selectSecretaryInfo(String personSeq) throws Exception {
        return cstmrinqireDao.selectSecretaryInfo(personSeq);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 수정
     * </pre>
     * @Method Name : updateCustomerInfo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int updateCustomerInfo(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        int ret = -1;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        try{
            cstmrinqireDao.updateCustomerInfo(cstmrIndividualCustomerVO);
            // 추가전화번호/이메일삭제 후 다시 등록 _happy81_2012.10.11
            cstmrinqireDao.deletePrsonMstContact(cstmrIndividualCustomerVO);
            
            Map<String, Object> paramMap = new HashMap<String, Object>();
            paramMap.put("personSeq", cstmrIndividualCustomerVO.getPersonSeq());
            Map<String, Object> personContactMap;
            List<Map<String, Object>> personMstContact = new ArrayList<Map<String, Object>>();
         
            if(null != cstmrIndividualCustomerVO.getTelNo2() && !"".equals(cstmrIndividualCustomerVO.getTelNo2())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_PHONE);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getTelNo2());
                if(cstmrIndividualCustomerVO.getTelShareYn2()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getTelShareYn2().trim().length() > 0 ? cstmrIndividualCustomerVO.getTelShareYn2() : "N");
                personMstContact.add(personContactMap);
            }
            if(null != cstmrIndividualCustomerVO.getTelNo3() && !"".equals(cstmrIndividualCustomerVO.getTelNo3())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_PHONE);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getTelNo3());
                if(cstmrIndividualCustomerVO.getTelShareYn3()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getTelShareYn3().trim().length() > 0 ? cstmrIndividualCustomerVO.getTelShareYn3() : "N");
                personMstContact.add(personContactMap);
            }
            if(null != cstmrIndividualCustomerVO.getTelNo4() && !"".equals(cstmrIndividualCustomerVO.getTelNo4())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_PHONE);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getTelNo4());
                if(cstmrIndividualCustomerVO.getTelShareYn4()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getTelShareYn4().trim().length() > 0 ? cstmrIndividualCustomerVO.getTelShareYn4() : "N");
                personMstContact.add(personContactMap);
            }
            if(null != cstmrIndividualCustomerVO.getTelNo5() && !"".equals(cstmrIndividualCustomerVO.getTelNo5())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_PHONE);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getTelNo5());
                if(cstmrIndividualCustomerVO.getTelShareYn5()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getTelShareYn5().trim().length() > 0 ? cstmrIndividualCustomerVO.getTelShareYn5() : "N");
                personMstContact.add(personContactMap);
            }

            if(null != cstmrIndividualCustomerVO.getPersonEmail02() && !"".equals(cstmrIndividualCustomerVO.getPersonEmail02())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_EMAIL);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getPersonEmail02());
                if(cstmrIndividualCustomerVO.getEmailShareYn2()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getEmailShareYn2().trim().length() > 0 ? cstmrIndividualCustomerVO.getEmailShareYn2() : "N");
                personMstContact.add(personContactMap);
            }
            if(null != cstmrIndividualCustomerVO.getPersonEmail3() && !"".equals(cstmrIndividualCustomerVO.getPersonEmail3())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_EMAIL);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getPersonEmail3());
                if(cstmrIndividualCustomerVO.getEmailShareYn3()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getEmailShareYn3().trim().length() > 0 ? cstmrIndividualCustomerVO.getEmailShareYn3() : "N");
                personMstContact.add(personContactMap);
            }
            if(null != cstmrIndividualCustomerVO.getPersonEmail4() && !"".equals(cstmrIndividualCustomerVO.getPersonEmail4())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_EMAIL);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getPersonEmail4());
                if(cstmrIndividualCustomerVO.getEmailShareYn4()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getEmailShareYn4().trim().length() > 0 ? cstmrIndividualCustomerVO.getEmailShareYn4() : "N");
                personMstContact.add(personContactMap);
            }
            if(null != cstmrIndividualCustomerVO.getPersonEmail5() && !"".equals(cstmrIndividualCustomerVO.getPersonEmail5())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_EMAIL);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getPersonEmail5());
                if(cstmrIndividualCustomerVO.getEmailShareYn5()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getEmailShareYn5().trim().length() > 0 ? cstmrIndividualCustomerVO.getEmailShareYn5() : "N");
                personMstContact.add(personContactMap);
            }

            //핸드폰번호2 추가
            if(null != cstmrIndividualCustomerVO.getCellNo2() && !"".equals(cstmrIndividualCustomerVO.getCellNo2())){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_CELL);
                personContactMap.put("contactNo", cstmrIndividualCustomerVO.getCellNo2());
                if(cstmrIndividualCustomerVO.getCellShareYn2()==null) personContactMap.put("shareYn", "N");
                else personContactMap.put("shareYn", cstmrIndividualCustomerVO.getCellShareYn2().trim().length() > 0 ? cstmrIndividualCustomerVO.getCellShareYn2() : "N");
                personMstContact.add(personContactMap);
            }

            if(personMstContact.size()>0){
                paramMap.put("personMstContact", personMstContact);
                ret = cstmrinqireDao.insertPersonMstContact(paramMap); //2012.10.09_happy81
            }
            
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getInterestYn())) {
                if(cstmrinqireDao.countInterestCustomer(cstmrIndividualCustomerVO) == 0){
                    paramMap = new HashMap<String, Object>();
                    
                    List<Map<String, Object>> myInterestCustomer = new ArrayList<Map<String, Object>>();//personMstContact
                    
                    paramMap.put("loginUserId", cstmrIndividualCustomerVO.getUserId());
                    paramMap.put("customerKind", cstmrIndividualCustomerVO.getCustomerKind());
                    paramMap.put("groupNm", cstmrIndividualCustomerVO.getGroupNm());
                    String [] intrestCustomerList = null;
                    if(cstmrIndividualCustomerVO.getCheckedCustomerList()!=null) intrestCustomerList = cstmrIndividualCustomerVO.getCheckedCustomerList().split(",");
                    paramMap.put("memo", cstmrIndividualCustomerVO.getMemo());
        
                    if(intrestCustomerList==null) {
                        intrestCustomerList = new String[1];
                        intrestCustomerList[0] = cstmrIndividualCustomerVO.getCustomerSeq();
                    }
                    
                    for(String customer : intrestCustomerList) {
                        personContactMap = new HashMap<String, Object>();
                        personContactMap.put("customer", customer);
                        myInterestCustomer.add(personContactMap);
                    }
                    
                    paramMap.put("myInterestCustomer", myInterestCustomer);
                    cstmrinqireDao.insertMyInterestCustomer(paramMap); //관심고객
                }else
                    cstmrinqireDao.updateMyInterestCustomer(cstmrIndividualCustomerVO);
            } else {
                paramMap = new HashMap<String, Object>();
                
                List<Map<String, Object>> customerSeq = new ArrayList<Map<String, Object>>();
                
                paramMap.put("userId", cstmrIndividualCustomerVO.getUserId());
                String [] intrestCustomerList = null;
                if(cstmrIndividualCustomerVO.getCheckedCustomerList()!=null) intrestCustomerList = cstmrIndividualCustomerVO.getCheckedCustomerList().split(",");
                //paramMap.put("memo", cstmrIndividualCustomerVO.getMemo());
    
                if(intrestCustomerList==null) {
                    intrestCustomerList = new String[1];
                    intrestCustomerList[0] = cstmrIndividualCustomerVO.getCustomerSeq();
                }
                
                for(String customer : intrestCustomerList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("customer", customer);
                    customerSeq.add(personContactMap);
                }
                
                paramMap.put("customerSeq", customerSeq);
                if(LOGGER.isDebugEnabled()) {
                    LOGGER.debug("paramMap:"+paramMap);
                }
                cstmrinqireDao.deleteMyInterestCustomer(paramMap);
            }
            
            // 개인별연락처정보에서 Max(cnt)를 가져온다. 2012.10.11
            cstmrIndividualCustomerVO.setMaxCnt(String.valueOf(cstmrinqireDao.selectPersonContactCnt(cstmrIndividualCustomerVO)));
            
            Vector<CustomerCode.contactCode> contactCodeList = new Vector<CustomerCode.contactCode>();

            if ("Y".equals(cstmrIndividualCustomerVO.getContactCd1())) {
              contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_001);
            }
            if ("Y".equals(cstmrIndividualCustomerVO.getContactCd2())) {
              contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_002);
            }
            if ("Y".equals(cstmrIndividualCustomerVO.getContactCd3())) {
              contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_003);
            }
            if ("Y".equals(cstmrIndividualCustomerVO.getContactCd4())) {
              contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_004);
            }
            if ("Y".equals(cstmrIndividualCustomerVO.getContactCd5())) {
              contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_005);
            }
            if ("Y".equals(cstmrIndividualCustomerVO.getContactCd6())) {
              contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_006);
            }
            if ("Y".equals(cstmrIndividualCustomerVO.getContactCd7())) {
              contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_007);
            }

            int maxCnt = 0;
            String typeGubun = "U";
            cstmrIndividualCustomerVO.setTypeGubun(typeGubun);
            // insert
            if("I".equals(typeGubun)){
                maxCnt = 0;
            }else if("U".equals(typeGubun)){//update
                maxCnt = maxCnt + 1;
            }else{
                maxCnt = 0;
            }

            paramMap = new HashMap<String, Object>();
            paramMap.put("maxCnt", maxCnt);
            paramMap.put("loginUserId", cstmrIndividualCustomerVO.getUserId());
            paramMap.put("personSeq", cstmrIndividualCustomerVO.getPersonSeq());
            
            List<Map<String, Object>> personContact = new ArrayList<Map<String, Object>>();
         
            for (CustomerCode.contactCode contactCode : contactCodeList){
                personContactMap = new HashMap<String, Object>();
                personContactMap.put("contactCode", contactCode.getKey());
                personContact.add(personContactMap);
            }
         
            paramMap.put("personContact", personContact);
            cstmrinqireDao.deletePersonContact( cstmrIndividualCustomerVO.getPersonSeq());
            if(personContact.size() > 0)
                cstmrinqireDao.insertPersonContact(paramMap);

            String rejectId = "";
            String contactNm = "";
            String corpKorNm = "";
            
            if(CustomerCode.CUSTOMER_KIND_PRIVATE.equals(cstmrIndividualCustomerVO.getCustomerKind())) {
                rejectId = cstmrIndividualCustomerVO.getPersonSeq();
                contactNm =  cstmrIndividualCustomerVO.getPersonNm();
            }
            else if(CustomerCode.CUSTOMER_KIND_COMPANY.equals(cstmrIndividualCustomerVO.getCustomerKind())) {
                rejectId = cstmrIndividualCustomerVO.getCustomerSeq();
                corpKorNm = cstmrIndividualCustomerVO.getCorpKorNm();
            }
            
            //Tel
            List<String> telList = new ArrayList<String>();
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getTelShareYn())) {
                telList.add(cstmrIndividualCustomerVO.getTelNo());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getTelShareYn2())) {
                telList.add(cstmrIndividualCustomerVO.getTelNo2());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getTelShareYn3())) {
                telList.add(cstmrIndividualCustomerVO.getTelNo3());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getTelShareYn4())) {
                telList.add(cstmrIndividualCustomerVO.getTelNo4());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getTelShareYn5())) {
                telList.add(cstmrIndividualCustomerVO.getTelNo5());
            }
            //Call
            List<String> cellList = new ArrayList<String>();
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getCellShareYn())) {
               cellList.add(cstmrIndividualCustomerVO.getCellNo());
            }
            //Email
            List<String> emailList = new ArrayList<String>();
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getEmailShareYn())) {
               emailList.add(cstmrIndividualCustomerVO.getPersonEmail());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getEmailShareYn2())) {
                emailList.add(cstmrIndividualCustomerVO.getPersonEmail02());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getEmailShareYn3())) {
                emailList.add(cstmrIndividualCustomerVO.getPersonEmail3());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getEmailShareYn4())) {
                emailList.add(cstmrIndividualCustomerVO.getPersonEmail4());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrIndividualCustomerVO.getEmailShareYn5())) {
                emailList.add(cstmrIndividualCustomerVO.getPersonEmail5());
            }
            
            paramMap = new HashMap<String, Object>();
            
            List<Map<String, Object>> tReject = new ArrayList<Map<String, Object>>();
            paramMap.put("rejectId", rejectId);
            paramMap.put("corpKorNm", corpKorNm);
            paramMap.put("contactNm", contactNm);
            if(emailList!=null){
                for (String email : emailList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("media", email);
                    personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_EMAIL);
                    tReject.add(personContactMap);
               }
            }
            if(telList!=null){
               for (String tel : telList) {
                   personContactMap = new HashMap<String, Object>();
                   personContactMap.put("media", tel);
                   personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_PHONE);
                   tReject.add(personContactMap);
               }
            }
            if(cellList!=null){
               for (String cell : cellList) {
                   personContactMap = new HashMap<String, Object>();
                   personContactMap.put("media", cell);
                   personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_CELL);
                   tReject.add(personContactMap);
               }
            }
            
           if(tReject.size()>0){
               paramMap.put("tReject", tReject);
                ret = cstmrinqireDao.deleteTReject(rejectId);
                ret = cstmrinqireDao.insertUpdateTReject(paramMap);
            }
            //KITA_CONTACT_INFO 2012.10.25 추가
           Vector<CustomerCode.kitaInfoCode> kitaInfoCodeList = new Vector<CustomerCode.kitaInfoCode>();
           
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd1())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_001);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd2())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_002);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd3())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_003);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd4())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_004);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd5())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_005);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd6())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_006);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd7())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_007);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd8())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_008);
           }
           if ("Y".equals(cstmrIndividualCustomerVO.getKitaInfoCd9())) {
               kitaInfoCodeList.add(CustomerCode.kitaInfoCode.KITA_INFO_CD_009);
           }

           if("U".equals(cstmrIndividualCustomerVO.getTypeGubun())){
               ret = cstmrinqireDao.deletePersonKitaContactInfo(cstmrIndividualCustomerVO.getPersonSeq()); 
           }
           
           paramMap = new HashMap<String, Object>();
           paramMap.put("personSeq", cstmrIndividualCustomerVO.getPersonSeq());
           paramMap.put("loginUserId", cstmrIndividualCustomerVO.getUserId());
           
           List<Map<String, Object>> personKitaContactInfo = new ArrayList<Map<String, Object>>();
           if(kitaInfoCodeList!=null){
               for (CustomerCode.kitaInfoCode kitaInfoCode : kitaInfoCodeList){
                   personContactMap = new HashMap<String, Object>();
                   personContactMap.put("kitaInfoCode", kitaInfoCode.getKey());
                   personKitaContactInfo.add(personContactMap);
              }
           }
           
           if(personKitaContactInfo.size()>0){
               paramMap.put("personKitaContactInfo", personKitaContactInfo);
               //KITA_CONTACT_INFO 2012.10.25 추가
               ret = cstmrinqireDao.insertPersonKitaContactInfo(paramMap);
           }
                txManager.commit(status);
                ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        
         return ret;
    }
    /**
     * <pre>
     * 개요 : 개인고객기본정보
     * </pre>
     * @Method Name : selectCustomerInfoDetail
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public CstmrIndividualCustomerVO selectCustomerInfoDetail(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoDetail(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 비서정보 수정
     * </pre>
     * @Method Name : selectCustomerInfoDetail
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int updateSecretaryInfo(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.updateSecretaryInfo(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 개인고객삭제
     * </pre>
     * @Method Name : deleteCustomer
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int deleteCustomer(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.deleteCustomer(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 상세이력
     * </pre>
     * @Method Name : getCustomerHistoryExcel
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> getCustomerHistoryExcel(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.getCustomerHistoryExcel(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 커리어패스 등록
     * </pre>
     * @Method Name : insertCareer
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int insertCareer(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.insertCareer(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 커리어패스 상세정보
     * </pre>
     * @Method Name : selectCareerInfoDetail
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public CstmrIndividualCustomerVO selectCareerInfoDetail(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCareerInfoDetail(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 커리어패스 수정
     * </pre>
     * @Method Name : updateCareer
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int updateCareer(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.updateCareer(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 Contact 현황 상세내용
     * </pre>
     * @Method Name : updateCareer
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerInfoContactStatusDetail(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoContactStatusDetail(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 Contact 현황 상세내용
     * </pre>
     * @Method Name : selectCustomerInfoContactStatusOfCorp
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public EgovMap selectCustomerInfoContactStatusOfCorp(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoContactStatusOfCorp(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 Contact 정보를 삭제한다
     * </pre>
     * @Method Name : deleteContactStatus
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int deleteContactStatus(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.deleteContactStatus(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 GET SQL Info
     * </pre>
     * @Method Name : getContactCnt
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int getContactCnt(ContactsttusregistVO contactsttusregistVO) throws Exception {
        return cstmrinqireDao.getContactCnt(contactsttusregistVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 GET SQL Info
     * </pre>
     * @Method Name : getContactCnt
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int getContactSeq(String personSeq) throws Exception {
        return cstmrinqireDao.getContactSeq(personSeq);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 Contact정보등록
     * </pre>
     * @Method Name : insertContactStatus
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int insertContactStatus(ContactsttusregistVO contactsttusregistVO) throws Exception {
        int ret = -1;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        try{
                CstmrIndividualCustomerVO cstmrIndividualCustomerVO = new CstmrIndividualCustomerVO();
                BeanUtils.copyProperties(cstmrIndividualCustomerVO, contactsttusregistVO);
                String[] arrContactPoc = contactsttusregistVO.getContactPoc();
                int contactSeq = 0;
                if("".equals(contactsttusregistVO.getContactSeq())){
                    contactSeq = cstmrinqireDao.getContactSeq(contactsttusregistVO.getCustId());
                    cstmrIndividualCustomerVO.setContactSeq(String.valueOf(contactSeq));
                }
                cstmrinqireDao.insertContactStatus(cstmrIndividualCustomerVO);
                if(contactsttusregistVO.getExpProd()!=null){
                    contactsttusregistVO.setProd(contactsttusregistVO.getExpProd().split(","));
                    cstmrinqireDao.insertTk2Prod(contactsttusregistVO);
                }
                String[] contactPocFromView = new String[contactsttusregistVO.getContactPoc().length-1];
                java.lang.System.arraycopy(contactsttusregistVO.getContactPoc(),1,contactPocFromView,0,contactsttusregistVO.getContactPoc().length-1);
                if("".equals(contactsttusregistVO.getContactSeq())){
                    if(contactPocFromView.length>0){
                        contactsttusregistVO.setContactSeq(cstmrIndividualCustomerVO.getContactSeq());
                        contactsttusregistVO.setContactPoc(contactPocFromView);
                        cstmrinqireDao.insertContactStatusCust(contactsttusregistVO);
                    }
                } else {
                    String[] contactstatusList =  cstmrinqireDao.selectContactStatusCust(contactsttusregistVO);
                    if(contactstatusList==null) {
                        contactsttusregistVO.setContactPoc(contactPocFromView);
                        cstmrinqireDao.insertContactStatusCust(contactsttusregistVO);
                    }
                    else {
                        Arrays.sort(contactstatusList);
                        Arrays.sort(contactPocFromView);
                        
                        String[] arrContactstatusDel  = null;
                        String tmpContactstatusDel = "";
                        String[] arrContactstatusIns  = null;
                        String tmpContactstatusIns = "";
                        for(String contactPoc: contactstatusList){
                            if(Arrays.binarySearch(contactPocFromView, contactPoc)<0){
                                LOGGER.debug("tmpContactstatusDel:"+contactPoc+"contactPoc"+Arrays.binarySearch(contactPocFromView, contactPoc));
                                tmpContactstatusDel += contactPoc+",";
                            }
                        }
                        for(String contactPocFromViewUnit: contactPocFromView){
                            if(Arrays.binarySearch(contactstatusList, contactPocFromViewUnit)<0 && !"".equals(contactPocFromViewUnit)){
                                LOGGER.debug("tmpContactstatusIns:"+contactPocFromViewUnit+"contactPocFromViewUnit"+Arrays.binarySearch(contactstatusList, contactPocFromViewUnit));
                                tmpContactstatusIns += contactPocFromViewUnit+",";
                            }
                        }
                        if(!"".equals(tmpContactstatusDel)) arrContactstatusDel = tmpContactstatusDel.split(",");
                        if(!"".equals(tmpContactstatusIns)) arrContactstatusIns = tmpContactstatusIns.split(",");
                        
                        LOGGER.debug("tmpContactstatusDel:"+tmpContactstatusDel+"Arrays.toString("+Arrays.toString(arrContactstatusDel));
                        LOGGER.debug("tmpContactstatusIns:"+tmpContactstatusIns+"Arrays.toString("+Arrays.toString(arrContactstatusIns));
                        
                        if(contactsttusregistVO.getContactPoc().length>2){
                            if("".equals(contactsttusregistVO.getContactSeq()))
                                contactsttusregistVO.setContactSeq(String.valueOf(contactSeq));
                            if(arrContactstatusIns!=null){
                                contactsttusregistVO.setContactPoc(arrContactstatusIns);
                                cstmrinqireDao.insertContactStatusCust(contactsttusregistVO);
                            }
                            if(arrContactstatusDel!=null){
                                contactsttusregistVO.setContactPoc(arrContactstatusDel);
                                cstmrinqireDao.deleteContactStatusCust(contactsttusregistVO);
                            }
                        }
                    }
                }
                Map<String, String> requestParamMap = new HashMap<String, String>();
                String modify_yn = requestParamMap.get("modify_yn");  //Y일때만 고객정보를 UPDATE 
                
                int max_seq = cstmrinqireDao.getMaxFileId();
                
                requestParamMap.put("file_id", max_seq+"");
                String sql = 
                " SELECT "+
                "      /*+ index_desc(b.B  PERSON_MST_PK)  index_desc(b.c  corporate_MST_PK)  * A.cust_id, B.Corp_State_Cd, "+
                "      b.member_id as member_id, "+
                "      nvl(B.user_fg ,B.user_fg) user_fg, "+
                "      nvl(B.corp_user_fg ,B.corp_user_fg) corp_user_fg, "+
                "      replace(replace(B.NAME,chr(10),''),chr(13),'') as user_kor_nm,  "+
                "      replace(replace(nvl(b.corp_nm,B.CORP_NM),chr(10),''),chr(13),'')  as comp_kor_nm, "+
                "      replace(replace(b.CEO_KOR_NM,chr(10),''),chr(13),'') as comp_kor_ceo,  "+
                "      '' as SEC_COMP_RESI_NO,   "+
                "      b.firm_no as comp_firm_no,  "+ 
                "      b.comp_no as comp_no, "+
                "      (case when b.corp_seq is null then 'Y' else 'N' end) as personal_yn, "+
                "      replace(replace(B.name,chr(10),''),chr(13),'') as contact_nm, "+
                "      B.TEL_NO as contact_tel,  "+
                "      B.FAX_NO as contact_fax,  "+
                "      B.FAX_SHARE_YN as contact_fax_yn, "+
                "      B.CELL_NO as contact_cell, "+
                "      B.CELL_SHARE_YN as contact_cell_yn, "+ 
                "      B.EMAIL as contact_email,  "+
                "      B.EMAIL_SHARE_YN as contact_email_yn, "+
                "      B.ZIP_CD as contact_zip_cd, "+                                        
                "      B.ADDRESS_1 as contact_addr1, "+
                "      B.ADDRESS_2 as contact_addr2, "+     
                "      TO_CHAR (B.CREATE_DATE, 'yyyy-mm-dd') input_date, "+
                "      B.SEQ , B.CORP_SEQ "+
                " FROM "+
                "      DEPT_CUSTOMER_INFO A, V_PERSON_CORP_MST B"+   // 2012.02.14 hss 
                " WHERE 1=1 "+ 
                //      "     AND b.corp_seq=c.corp_seq(+) "+  
                "     AND A.CUST_ID = B.SEQ "+ 
                "     AND A.FILE_ID='"+max_seq+"' "; 
                requestParamMap.put("sql", sql);

                int file_row_id = 1;
                contactsttusregistVO.setContactPoc(arrContactPoc);
                for(int i = 0 ; i < contactsttusregistVO.getContactPoc().length; i++) {
                    
                    requestParamMap.put("file_row_id", file_row_id+"");
                    file_row_id += 2;
                    
                    requestParamMap.put("comp_no", contactsttusregistVO.getCompNo().replaceAll("-",""));     //사업자등록번호
                    requestParamMap.put("comp_kor_nm", contactsttusregistVO.getCorpNm());     //회사/단체명
                    requestParamMap.put("comp_kor_ceo", "");    //대표자
                    requestParamMap.put("contact_kor_nm", "");
                    requestParamMap.put("contact_cell", "");
                    requestParamMap.put("contact_email", contactsttusregistVO.getPersonEmail1()[i]+"@"+contactsttusregistVO.getPersonEmail2()[i]);
                    requestParamMap.put("comp_tel", "");
                    requestParamMap.put("contact_tel", "");
                    requestParamMap.put("contact_dept", contactsttusregistVO.getDeptNm()[i]);
                    requestParamMap.put("contact_duty", "");
                    requestParamMap.put("birth_day", "");
                    
                    requestParamMap.put("member_id", "");   //무역업고유번호
                    requestParamMap.put("kita_id", "");
                    requestParamMap.put("contact_fax", "");
                    requestParamMap.put("comp_fax", "");
                    requestParamMap.put("comp_eng_nm", "");
                    requestParamMap.put("comp_eng_ceo", "");
                    requestParamMap.put("comp_resi_no", "");
                    requestParamMap.put("contact_eng_nm", "");
                    
                    String insertCorporateMstGb = "";
                    String insertPersonMstGb = "";
                    
                    requestParamMap.put("comp_kor_nm_rp",  requestParamMap.get("comp_kor_nm").replaceAll("㈜", "(주)"));
                    Map<String, String> rsltProp = cstmrinqireDao.selectCorpSeqWithMap(requestParamMap);
                    requestParamMap.put("corp_seq",  requestParamMap.get("corp_seq"));
                    requestParamMap.put("ceo_update_yn",  requestParamMap.get("ceo_update_yn"));
                    
                    if ("0".equals(rsltProp.get("CORP_SEQ"))){
                        requestParamMap.put("comp_kor_nm_rp",  requestParamMap.get("comp_kor_nm").replaceAll("(주)","㈜"));
                        rsltProp = cstmrinqireDao.selectCorpSeqWithMap(requestParamMap);
                    }
                    
                    if ("0".equals(rsltProp.get("CORP_SEQ"))){
                        if ("N".equals(modify_yn)){  
                            insertCorporateMstGb = "skip";  //Y일때는 기존로직타고 N일때는 update 하지 않음
                        } else { 
                            insertCorporateMstGb = "update";
                        }
                    } else {
                        if ("".equals(requestParamMap.get("comp_no")) || ("".equals(requestParamMap.get("comp_kor_nm")) && "".equals(requestParamMap.get("comp_kor_ceo")))){
                            insertCorporateMstGb = "skip";
                        } else {
                            insertCorporateMstGb = "insert";
                        }
                    }
                    int personSeq = 0;
                    if ("insert".equals(insertCorporateMstGb)){
                        int corpSeq = cstmrinqireDao.selectCorpSeq();
                        requestParamMap.put("corp_seq", String.valueOf(corpSeq));
                        cstmrinqireDao.insertCorpMst(requestParamMap);
                        
                        if(requestParamMap.get("contact_email") != null && !"".equals(requestParamMap.get("contact_email"))){
                            int existCnt = cstmrinqireDao.getExistRejectMail(requestParamMap.get("contact_email"));
                            if("Y".equals(requestParamMap.get("email_share_yn"))){
                                if(existCnt == 0) {
                                    HashMap<String, String> hm = new HashMap<String, String>();
                                    hm.put("email", requestParamMap.get("contact_email"));
                                    hm.put("name", requestParamMap.get("ceo_kor_nm"));
                                    cstmrinqireDao.insertRejectMail(hm);
                                }
                            } else {
                                if(existCnt > 0) {
                                    cstmrinqireDao.deleteRejectMail(requestParamMap.get("contact_email"));
                                }
                            }
                        }
                    } else if ("update".equals(insertCorporateMstGb)){
                        cstmrinqireDao.updateCorpMst(requestParamMap);
                    }
                    personSeq = cstmrinqireDao.selectPersonSeqWithMap(requestParamMap);
                    if (!"0".equals(personSeq)){ 
                        if ("N".equals(modify_yn)){  //Y일때는 기존로직타고 N일때는 update 하지 않음
                            insertPersonMstGb = "skip";
                        } else { 
                            insertPersonMstGb = "update";
                        }
                    } else {
                        if (("".equals(requestParamMap.get("contact_kor_nm")) && "".equals(requestParamMap.get("contact_email"))) ||
                            ("".equals(requestParamMap.get("contact_kor_nm")) && "".equals(requestParamMap.get("contact_cell")))){
                            insertPersonMstGb = "skip";
                        } else {
                            insertPersonMstGb = "insert";
                        }
                    }
                    if ("insert".equals(insertPersonMstGb)){
                        personSeq = cstmrinqireDao.selectPersonSeq();
                        requestParamMap.put("person_seq", String.valueOf(personSeq));
                        cstmrinqireDao.insertPersonMst(requestParamMap);
                        
                        if(requestParamMap.get("contact_email") != null && !"".equals(requestParamMap.get("contact_email"))){
                            int existCnt = cstmrinqireDao.getExistRejectMail(requestParamMap.get("contact_email"));
                            if("Y".equals(requestParamMap.get("email_share_yn"))){
                                if(existCnt == 0) {
                                    HashMap<String, String> hm = new HashMap<String, String>();
                                    hm.put("email", requestParamMap.get("contact_email"));
                                    hm.put("name", requestParamMap.get("ceo_kor_nm"));
                                    cstmrinqireDao.insertRejectMail(hm);
                                }
                            } else {
                                if(existCnt > 0) {
                                    cstmrinqireDao.deleteRejectMail(requestParamMap.get("contact_email"));
                                }
                            }
                        }
                    } else if ("update".equals(insertPersonMstGb)){
                        requestParamMap.put("person_seq", String.valueOf(personSeq));
                        cstmrinqireDao.updatePersonMst(requestParamMap);
                    }
                    
                    if (personSeq != 0){
                        int countTemp = cstmrinqireDao.getDeptCustomer(requestParamMap);
                        if (countTemp == 0)
                            cstmrinqireDao.insertDeptCustomer(requestParamMap);
                    }
                    
                } // end for
            
                String delete_yn = UtilManager.setChangeNull(requestParamMap.get("delete_yn"), "N");
                requestParamMap.put("delete_yn", delete_yn);
                cstmrinqireDao.setMarketingFolderExcel(requestParamMap);
                txManager.commit(status);
                ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        
         return ret;
    }
    /**
     * <pre>
     * 개요 : 개인 상세 Contact정보 복수 담당자 검색
     * </pre>
     * @Method Name : selectCustomerInfoContactStatusCust
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerInfoContactStatusCust(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoContactStatusCust(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : Contact 현황 엑셀등록
     * </pre>
     * @Method Name : uploadContactExcel
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int uploadContactExcel(Map<String, String> prop) throws Exception {
        int ret = -1;
        final int tREAD_FIRST_COL = 0;
        final int tREAD_FIRST_ROW = 6;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        try{
            //Workbook workbook = null;
            //Sheet sheet = null;
            //Cell cell = null;
            Map<String, String> requestParamMap = new HashMap<String, String>();
            requestParamMap.putAll(prop);
            String excelDownloadDir = requestParamMap.get("excelDownloadDir");
            String excelFileName = requestParamMap.get("excelFileName");
            
            String modify_yn = requestParamMap.get("modify_yn");  //Y일때만 고객정보를 UPDATE 
            
            File srcFile = new File(excelDownloadDir + excelFileName);

            if(srcFile.exists()){
                try {
                    FileInputStream fis = new FileInputStream(srcFile);
                    HSSFSheet sheet = dkExcelService.getHSSFSheet(fis);
                    int rowCount = sheet.getPhysicalNumberOfRows();
                    
                    //workbook = Workbook.getWorkbook(srcFile);                   //존재하는 엑셀파일 경로를 지정
                    //workbook.getSheets();
                    //sheet = workbook.getSheet(0);                               //첫번째 시트를 지정합니다.
                    //int rowCount = sheet.getRows();                             //총 로우수를 가져옵니다.
                    
                    int max_seq = cstmrinqireDao.getMaxFileId();
                    
                    requestParamMap.put("file_id", max_seq+"");
                    String sql = 
                    " SELECT "+
                    "      /*+ index_desc(b.B  PERSON_MST_PK)  index_desc(b.c  corporate_MST_PK)  * A.cust_id, B.Corp_State_Cd, "+
                    "      b.member_id as member_id, "+
                    "      nvl(B.user_fg ,B.user_fg) user_fg, "+
                    "      nvl(B.corp_user_fg ,B.corp_user_fg) corp_user_fg, "+
                    "      replace(replace(B.NAME,chr(10),''),chr(13),'') as user_kor_nm,  "+
                    "      replace(replace(nvl(b.corp_nm,B.CORP_NM),chr(10),''),chr(13),'')  as comp_kor_nm, "+
                    "      replace(replace(b.CEO_KOR_NM,chr(10),''),chr(13),'') as comp_kor_ceo,  "+
                    "      '' as SEC_COMP_RESI_NO,   "+
                    "      b.firm_no as comp_firm_no,  "+ 
                    "      b.comp_no as comp_no, "+
                    "      (case when b.corp_seq is null then 'Y' else 'N' end) as personal_yn, "+
                    "      replace(replace(B.name,chr(10),''),chr(13),'') as contact_nm, "+
                    "      B.TEL_NO as contact_tel,  "+
                    "      B.FAX_NO as contact_fax,  "+
                    "      B.FAX_SHARE_YN as contact_fax_yn, "+
                    "      B.CELL_NO as contact_cell, "+
                    "      B.CELL_SHARE_YN as contact_cell_yn, "+ 
                    "      B.EMAIL as contact_email,  "+
                    "      B.EMAIL_SHARE_YN as contact_email_yn, "+
                    "      B.ZIP_CD as contact_zip_cd, "+                                        
                    "      B.ADDRESS_1 as contact_addr1, "+
                    "      B.ADDRESS_2 as contact_addr2, "+     
                    "      TO_CHAR (B.CREATE_DATE, 'yyyy-mm-dd') input_date, "+
                    "      B.SEQ , B.CORP_SEQ "+
                    " FROM "+
                    "      DEPT_CUSTOMER_INFO A, V_PERSON_CORP_MST B"+   // 2012.02.14 hss 
                    " WHERE 1=1 "+ 
                    //      "     AND b.corp_seq=c.corp_seq(+) "+  
                    "     AND A.CUST_ID = B.SEQ "+ 
                    "     AND A.FILE_ID='"+max_seq+"' "; 
                    requestParamMap.put("sql", sql);

                    int file_row_id = 1;
                    int cloidx = 0;
                    for(int i = tREAD_FIRST_ROW ; i < rowCount && i < (tREAD_FIRST_ROW+10000) ; i++) {
                        HSSFRow row = sheet.getRow(i);
                        
                        cloidx = tREAD_FIRST_COL;
                        
                        requestParamMap.put("file_row_id", file_row_id+"");
                        file_row_id += 2;
                        
                        int k = tREAD_FIRST_COL;
                        String tStrValue = EgovExcelUtil.getStringValue(row.getCell(cloidx++)) ; //UtilManager.getCell(sheet, k, i);
                        
                        if(tStrValue.trim().length() == 0) break;               //첫번째 열이 비어 있으면 종료 된 것으로 간주한다.

                        k++;
                        requestParamMap.put("comp_no", EgovExcelUtil.getStringValue(row.getCell(cloidx++)).replaceAll(" ",""));     //사업자등록번호
                        k++;
                        requestParamMap.put("comp_kor_nm", EgovExcelUtil.getStringValue(row.getCell(cloidx++)).replaceAll("'",""));     //회사/단체명
                        k++;
                        requestParamMap.put("comp_kor_ceo", EgovExcelUtil.getStringValue(row.getCell(cloidx++)).replaceAll("'",""));    //대표자
                        k++;
                        requestParamMap.put("contact_kor_nm", EgovExcelUtil.getStringValue(row.getCell(cloidx++)).replaceAll("'",""));
                        k++;
                        requestParamMap.put("contact_cell", EgovExcelUtil.getStringValue(row.getCell(cloidx++)));
                        k++;
                        requestParamMap.put("contact_email", EgovExcelUtil.getStringValue(row.getCell(cloidx++)));
                        k++;
                        requestParamMap.put("expProd", EgovExcelUtil.getStringValue(row.getCell(cloidx++))); //품목
                        k++;
                        requestParamMap.put("comp_tel", EgovExcelUtil.getStringValue(row.getCell(cloidx)));
                        requestParamMap.put("contact_tel", EgovExcelUtil.getStringValue(row.getCell(cloidx++)));
                        k++;
                        requestParamMap.put("contact_dept", EgovExcelUtil.getStringValue(row.getCell(cloidx++)));
                        k++;
                        requestParamMap.put("contact_duty", EgovExcelUtil.getStringValue(row.getCell(cloidx++)));
                        k++;
                        requestParamMap.put("birth_day", EgovExcelUtil.getStringValue(row.getCell(cloidx++)));
                        k++;
                        requestParamMap.put("vocContent", EgovExcelUtil.getStringValue(row.getCell(cloidx++))); //컨택현황
                        
                        requestParamMap.put("member_id", "");   //무역업고유번호
                        requestParamMap.put("kita_id", "");
                        requestParamMap.put("contact_fax", "");
                        requestParamMap.put("comp_fax", "");
                        requestParamMap.put("comp_eng_nm", "");
                        requestParamMap.put("comp_eng_ceo", "");
                        requestParamMap.put("comp_resi_no", "");
                        requestParamMap.put("contact_eng_nm", "");

                        String insertCorporateMstGb = "";
                        String insertPersonMstGb = "";
                        
                        requestParamMap.put("comp_kor_nm_rp",  requestParamMap.get("comp_kor_nm").replaceAll("㈜", "(주)"));
                        Map<String, String> rsltProp = cstmrinqireDao.selectCorpSeqWithMap(requestParamMap);
                        requestParamMap.put("corp_seq",  requestParamMap.get("corp_seq"));
                        requestParamMap.put("ceo_update_yn",  requestParamMap.get("ceo_update_yn"));
                        
                        if ("0".equals(rsltProp.get("CORP_SEQ"))){
                            requestParamMap.put("comp_kor_nm_rp",  requestParamMap.get("comp_kor_nm").replaceAll("(주)","㈜"));
                            rsltProp = cstmrinqireDao.selectCorpSeqWithMap(requestParamMap);
                        }
                        
                        if ("0".equals(rsltProp.get("CORP_SEQ"))){
                            if ("N".equals(modify_yn)){  
                                insertCorporateMstGb = "skip";  //Y일때는 기존로직타고 N일때는 update 하지 않음
                            } else { 
                                insertCorporateMstGb = "update";
                            }
                        } else {
                            if ("".equals(requestParamMap.get("comp_no")) || ("".equals(requestParamMap.get("comp_kor_nm")) && "".equals(requestParamMap.get("comp_kor_ceo")))){
                                insertCorporateMstGb = "skip";
                            } else {
                                insertCorporateMstGb = "insert";
                            }
                        }
                        int personSeq = 0;
                        if ("insert".equals(insertCorporateMstGb)){
                            int corpSeq = cstmrinqireDao.selectCorpSeq();
                            requestParamMap.put("corp_seq", String.valueOf(corpSeq));
                            cstmrinqireDao.insertCorpMst(requestParamMap);
                            
                            if(requestParamMap.get("contact_email") != null && !"".equals(requestParamMap.get("contact_email"))){
                                int existCnt = cstmrinqireDao.getExistRejectMail(requestParamMap.get("contact_email"));
                                if("Y".equals(requestParamMap.get("email_share_yn"))){
                                    if(existCnt == 0) {
                                        HashMap<String, String> hm = new HashMap<String, String>();
                                        hm.put("email", requestParamMap.get("contact_email"));
                                        hm.put("name", requestParamMap.get("ceo_kor_nm"));
                                        cstmrinqireDao.insertRejectMail(hm);
                                    }
                                } else {
                                    if(existCnt > 0) {
                                        cstmrinqireDao.deleteRejectMail(requestParamMap.get("contact_email"));
                                    }
                                }
                            }
                        } else if ("update".equals(insertCorporateMstGb)){
                            cstmrinqireDao.updateCorpMst(requestParamMap);
                        }
                        personSeq = cstmrinqireDao.selectPersonSeqWithMap(requestParamMap);
                        if (!"0".equals(personSeq)){ 
                            if ("N".equals(modify_yn)){  //Y일때는 기존로직타고 N일때는 update 하지 않음
                                insertPersonMstGb = "skip";
                            } else { 
                                insertPersonMstGb = "update";
                            }
                        } else {
                            if (("".equals(requestParamMap.get("contact_kor_nm")) && "".equals(requestParamMap.get("contact_email"))) ||
                                ("".equals(requestParamMap.get("contact_kor_nm")) && "".equals(requestParamMap.get("contact_cell")))){
                                insertPersonMstGb = "skip";
                            } else {
                                insertPersonMstGb = "insert";
                            }
                        }
                        if ("insert".equals(insertPersonMstGb)){
                            personSeq = cstmrinqireDao.selectPersonSeq();
                            requestParamMap.put("person_seq", String.valueOf(personSeq));
                            cstmrinqireDao.insertPersonMst(requestParamMap);
                            
                            if(requestParamMap.get("contact_email") != null && !"".equals(requestParamMap.get("contact_email"))){
                                int existCnt = cstmrinqireDao.getExistRejectMail(requestParamMap.get("contact_email"));
                                if("Y".equals(requestParamMap.get("email_share_yn"))){
                                    if(existCnt == 0) {
                                        HashMap<String, String> hm = new HashMap<String, String>();
                                        hm.put("email", requestParamMap.get("contact_email"));
                                        hm.put("name", requestParamMap.get("ceo_kor_nm"));
                                        cstmrinqireDao.insertRejectMail(hm);
                                    }
                                } else {
                                    if(existCnt > 0) {
                                        cstmrinqireDao.deleteRejectMail(requestParamMap.get("contact_email"));
                                    }
                                }
                            }
                        } else if ("update".equals(insertPersonMstGb)){
                            requestParamMap.put("person_seq", String.valueOf(personSeq));
                            cstmrinqireDao.updatePersonMst(requestParamMap);
                        }
                        
                        if (personSeq != 0){
                            int countTemp = cstmrinqireDao.getDeptCustomer(requestParamMap);
                            if (countTemp == 0)
                                cstmrinqireDao.insertDeptCustomer(requestParamMap);
                        }
                        
                        if(!"".equals(requestParamMap.get("vocContent"))){
                            cstmrinqireDao.insertContactStatusExcel(requestParamMap);
                            if(!"".equals(requestParamMap.get("expProd")))
                                cstmrinqireDao.insertTk2ProdExcel(requestParamMap);
                        }
                        
                    } // end for
                
                    String delete_yn = UtilManager.setChangeNull(requestParamMap.get("delete_yn"), "N");
                    requestParamMap.put("delete_yn", delete_yn);
                    cstmrinqireDao.setMarketingFolderExcel(requestParamMap);

                } catch (SQLException sqlexception) {
                    throw sqlexception;
                } catch (Exception exception) {
                    throw exception;
                } finally {
//                    try {
//                        if(workbook != null) workbook.close();
//                    } catch (Exception e) {
//                    }
                }
            }
            
            txManager.commit(status);
            ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        
        return ret;
    }
    /**
     * <pre>
     * 개요 : 개인 상세 Contact정보등록
     * </pre>
     * @Method Name : insertContactStatus
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public EgovMap selectSympathy(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectSympathy(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 공감 중복체크 및 공감여부 COUNT
     * </pre>
     * @Method Name : countSympathy
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int countSympathy(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.countSympathy(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 공감하기
     * </pre>
     * @Method Name : insertSympathy
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int insertSympathy(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.insertSympathy(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 추천테이블에 insert
     * </pre>
     * @Method Name : insertRecommendation
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public int insertRecommendation(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.insertRecommendation(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 객서비스상세정보
     * </pre>
     * @Method Name : selectCustomerInfoServiceDetail
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public EgovMap selectCustomerInfoServiceDetail(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoServiceDetail(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 개인 상세 서비스정보 참가자
     * </pre>
     * @Method Name : selectCustomerInfoServiceParticipant
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrIndividualCustomerVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerInfoServiceParticipant(CstmrIndividualCustomerVO cstmrIndividualCustomerVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoServiceParticipant(cstmrIndividualCustomerVO);
    }
    /**
     * <pre>
     * 개요 : 해외마케팅 자문위원 체크
     * </pre>
     * @Method Name : userAuthorSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param String
     * @return
     * @throws Exception
     */  
    public EgovMap userAuthorSelect(String userId) throws Exception {
        return cstmrinqireDao.userAuthorSelect(userId);
    }
    /**
     * <pre>
     * 개요 : 개인고객조회
     * </pre>
     * @Method Name : selectCustomerList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param individualCstmrinqireVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerList(IndividualCstmrinqireVO individualCstmrinqireVO) throws Exception {
        return cstmrinqireDao.selectCustomerList(individualCstmrinqireVO);
    }
    /**
     * <pre>
     * 1. 개요 : 개인고객 조회 대상 쿼리
     * </pre>
     * @Method Name : selectCustomerSql
     * @author : dkcns
     * @date : 2017. 8. 14.
     * @param vo
     * @return
     * @throws Exception
     */ 
    public String selectCustomerSql(IndividualCstmrinqireVO individualCstmrinqireVO) throws Exception {
        String sqlId = "selectCustomerSql";
        String sql = dkSQLService.getMybatisSql(sqlId, individualCstmrinqireVO);

        return sql;
    }
    /**
     * <pre>
     * 1. 개요 : 개인고객 조회 Excel Download
     * </pre>
     * @Method Name : selectCustomerExcelList
     * @author : dkcns
     * @date : 2017. 8. 14.
     * @param vo
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerExcelList(IndividualCstmrinqireVO individualCstmrinqireVO) throws Exception {
        return cstmrinqireDao.selectCustomerExcelList(individualCstmrinqireVO);
    }
    /**
     * <pre>
     * 1. 개요 : 개인고객 조회 관심고객등록
     * </pre>
     * @Method Name : insertMyInterestCustomer
     * @author : dkcns
     * @date : 2017. 8. 14.
     * @param vo
     * @return
     * @throws Exception
     */ 
    public int insertMyInterestCustomer(Map<String, Object> paramMap) throws Exception {
        return cstmrinqireDao.insertMyInterestCustomer(paramMap);
    }
    /**
     * <pre>
     * 1. 개요 : GROUP_ID_SEQ 가져오기
     * </pre>
     * @Method Name : selectInterestGroupIdKey
     * @author : dkcns
     * @date : 2017. 8. 14.
     * @param vo
     * @return
     * @throws Exception
     */ 
    public String selectInterestGroupIdKey() throws Exception {
        return cstmrinqireDao.selectInterestGroupIdKey();
    }
    /**
     * <pre>
     * 1. 개요 : INTEREST_GROUP 테이블에 INSERT
     * </pre>
     * @Method Name : selectCustomerExcelList
     * @author : dkcns
     * @date : 2017. 8. 14.
     * @param vo
     * @return
     * @throws Exception
     */ 
    public int insertInterestGroup(IndividualCstmrinqireVO individualCstmrinqireVO) throws Exception {
        return cstmrinqireDao.insertInterestGroup(individualCstmrinqireVO);
    }
    /**
     * <pre>
     * 1. 개요 : 관심그룹조회
     * </pre>
     * @Method Name : selectCustomerExcelList
     * @author : dkcns
     * @date : 2017. 8. 14.
     * @param vo
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectGroupCodeList(IndividualCstmrinqireVO individualCstmrinqireVO) throws Exception {
        return cstmrinqireDao.selectGroupCodeList(individualCstmrinqireVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객조회
     * </pre>
     * @Method Name : selectCustomerList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param individualCstmrinqireVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerList(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_TRADEINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByTradeOption(cstmrReqDataVO);
        } else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_SERVICEINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByServiceOption(cstmrReqDataVO);
        } else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_MEMBERINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByMemberOption(cstmrReqDataVO);
        } else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_BUSINESSINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByBusinessOption(cstmrReqDataVO);
        }
        return new ArrayList<EgovMap>();
    }
    /**
     * <pre>
     * 개요 : 법인고객조회 sql
     * </pre>
     * @Method Name : selectCustomerSql
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public String selectCustomerCompanySql(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        String sqlId = "";
        String sql = "";
        
        if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_TRADEINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind()))
            sqlId = "selectCustomerInfoByTradeOptionSql";
        else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_SERVICEINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind()))
            sqlId = "selectCustomerInfoByServiceOptionSql";
        else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_MEMBERINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind()))
            sqlId = "selectCustomerInfoByMemberOptionSql";
        else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_BUSINESSINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind()))
            sqlId = "selectCustomerInfoByBusinessOptionSql";
        
        sql = dkSQLService.getMybatisSql(sqlId, cstmrReqDataVO);
        
        return sql;
    }
    
    /**
     * <pre>
     * 개요 : 법인고객조회 품목/부서/코드조회
     * </pre>
     * @Method Name : normalSearch
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> normalSearch(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        if("item".equals(cstmrReqDataVO.getTbname())){
            return cstmrinqireDao.itemSearch(cstmrReqDataVO);
        }else if("dept_code".equals(cstmrReqDataVO.getTbname())){
            return cstmrinqireDao.deptSearch(cstmrReqDataVO);
        } else {
            if("prize_cd".equals(cstmrReqDataVO.getTbname())){
                cstmrReqDataVO.setCodeId("24");
            } else if("jongmok_cdode1".equals(cstmrReqDataVO.getTbname())){
                cstmrReqDataVO.setCodeId("14");
            } else if("dept_code".equals(cstmrReqDataVO.getTbname())){
                cstmrReqDataVO.setCodeId("39");
            } else if("change_code".equals(cstmrReqDataVO.getTbname())){
                cstmrReqDataVO.setCodeId("57");
            }
            return cstmrinqireDao.normalSearch(cstmrReqDataVO);
        }
    }
    /**
     * <pre>
     * 개요 : 법인고객조회 엑셀다운로드
     * </pre>
     * @Method Name : selectCustomerExcelList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectCustomerExcelList(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_TRADEINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByTradeOptionExcel(cstmrReqDataVO);
        } else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_SERVICEINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByServiceOptionExcel(cstmrReqDataVO);
        } else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_MEMBERINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByMemberOptionExcel(cstmrReqDataVO);
        } else if(CustomerCode.COMPANY_CUSTOMER_SEARCH_OPTION_KIND_IS_BUSINESSINFO.equals(cstmrReqDataVO.getCustomerSearchOptionKind())) {
            return cstmrinqireDao.selectCustomerInfoByBusinessOptionExcel(cstmrReqDataVO);
        }
        return new ArrayList<EgovMap>();
    }
    /**
     * <pre>
     * 개요 : 법인고객조회 엑셀비교
     * </pre>
     * @Method Name : selectCustomerExcelList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int uploadExcel(Map<String, String> prop) throws Exception {
        int ret = -1;
        final int tREAD_FIRST_COL = 0;
        final int tREAD_FIRST_ROW = 6;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        try{
            Workbook workbook = null;
            Sheet sheet = null;
            //Cell cell = null;
            Map<String, String> requestParamMap = new HashMap<String, String>();
            requestParamMap.putAll(prop);
            String excelDownloadDir = requestParamMap.get("excelDownloadDir");
            String excelFileName = requestParamMap.get("excelFileName");
            
            String modify_yn = requestParamMap.get("modify_yn");  //Y일때만 고객정보를 UPDATE 
            
            File srcFile = new File(excelDownloadDir + excelFileName);

            if(srcFile.exists()){
                try {
                    workbook = Workbook.getWorkbook(srcFile);                   //존재하는 엑셀파일 경로를 지정
                    workbook.getSheets();
                    sheet = workbook.getSheet(0);                               //첫번째 시트를 지정합니다.
                    int rowCount = sheet.getRows();                             //총 로우수를 가져옵니다.
                    
                    int max_seq = cstmrinqireDao.getMaxFileId();
                    
                    requestParamMap.put("file_id", max_seq+"");
                    String sql = 
                    " SELECT "+
                    "      /*+ index_desc(b.B  PERSON_MST_PK)  index_desc(b.c  corporate_MST_PK)  */ A.cust_id, B.Corp_State_Cd, "+
                    "      b.member_id as member_id, "+
                    "      nvl(B.user_fg ,B.user_fg) user_fg, "+
                    "      nvl(B.corp_user_fg ,B.corp_user_fg) corp_user_fg, "+
                    "      replace(replace(B.NAME,chr(10),''),chr(13),'') as user_kor_nm,  "+
                    "      replace(replace(nvl(b.corp_nm,B.CORP_NM),chr(10),''),chr(13),'')  as comp_kor_nm, "+
                    "      replace(replace(b.CEO_KOR_NM,chr(10),''),chr(13),'') as comp_kor_ceo,  "+
                    "      '' as SEC_COMP_RESI_NO,   "+
                    "      b.firm_no as comp_firm_no,  "+ 
                    "      b.comp_no as comp_no, "+
                    "      (case when b.corp_seq is null then 'Y' else 'N' end) as personal_yn, "+
                    "      replace(replace(B.name,chr(10),''),chr(13),'') as contact_nm, "+
                    "      B.TEL_NO as contact_tel,  "+
                    "      B.FAX_NO as contact_fax,  "+
                    "      B.FAX_SHARE_YN as contact_fax_yn, "+
                    "      B.CELL_NO as contact_cell, "+
                    "      B.CELL_SHARE_YN as contact_cell_yn, "+ 
                    "      B.EMAIL as contact_email,  "+
                    "      B.EMAIL_SHARE_YN as contact_email_yn, "+
                    "      B.ZIP_CD as contact_zip_cd, "+                                        
                    "      B.ADDRESS_1 as contact_addr1, "+
                    "      B.ADDRESS_2 as contact_addr2, "+     
                    "      TO_CHAR (B.CREATE_DATE, 'yyyy-mm-dd') input_date, "+
                    "      B.SEQ , B.CORP_SEQ "+
                    " FROM "+
                    "      DEPT_CUSTOMER_INFO A, V_PERSON_CORP_MST B"+   // 2012.02.14 hss 
                    " WHERE 1=1 "+ 
                    //      "     AND b.corp_seq=c.corp_seq(+) "+  
                    "     AND A.CUST_ID = B.SEQ "+ 
                    "     AND A.FILE_ID='"+max_seq+"' "; 
                    requestParamMap.put("sql", sql);
                    
                    int file_row_id = 1;
                    
                    for(int i = tREAD_FIRST_ROW ; i < rowCount && i < (tREAD_FIRST_ROW+10000) ; i++) {
                        
                        requestParamMap.put("file_row_id", file_row_id+"");
                        file_row_id += 2;
                        
                        //System.out.println("[SUGAR] ("+tREAD_FIRST_COL+","+i+") : " + getCell(sheet, tREAD_FIRST_COL, i));
                        //System.out.println("[SUGAR] ("+(tREAD_FIRST_COL+1)+","+i+") : " + getCell(sheet, tREAD_FIRST_COL+1, i));
                        
                        int k = tREAD_FIRST_COL;
                        String tStrValue = UtilManager.getCell(sheet, k, i);
                        
                        if(tStrValue.trim().length() == 0) break;               //첫번째 열이 비어 있으면 종료 된 것으로 간주한다.

                        k++;
                        requestParamMap.put("member_id", UtilManager.getCell(sheet, k, i).replaceAll(" ",""));   //무역업고유번호 
                        k++;
                        requestParamMap.put("comp_no", UtilManager.getCell(sheet, k, i).replaceAll(" ",""));     //사업자등록번호
                        k++;
                        requestParamMap.put("comp_kor_nm", UtilManager.getCell(sheet, k, i).replaceAll("'",""));     //회사/단체명
                        k++;
                        requestParamMap.put("comp_kor_ceo", UtilManager.getCell(sheet, k, i).replaceAll("'",""));    //대표자
                        k++;
                        requestParamMap.put("contact_kor_nm", UtilManager.getCell(sheet, k, i).replaceAll("'",""));
                        k++;
                        requestParamMap.put("kita_id", UtilManager.getCell(sheet, k, i));
                        k++;
                        requestParamMap.put("contact_email", UtilManager.getCell(sheet, k, i));
                        /*
                        k++;
                        requestParamMap.put("birth_day", UtilManager.getCell(sheet, k, i));
                        */
                        k++;
                        requestParamMap.put("comp_tel", UtilManager.getCell(sheet, k, i));
                        requestParamMap.put("contact_tel", UtilManager.getCell(sheet, k, i));
                        k++;
                        requestParamMap.put("contact_fax", UtilManager.getCell(sheet, k, i));
                        requestParamMap.put("comp_fax", UtilManager.getCell(sheet, k, i));
                        k++;
                        requestParamMap.put("contact_cell", UtilManager.getCell(sheet, k, i));

                        requestParamMap.put("comp_eng_nm", "");
                        requestParamMap.put("comp_eng_ceo", "");
                        requestParamMap.put("comp_resi_no", "");
                        requestParamMap.put("contact_eng_nm", "");
                        requestParamMap.put("contact_dept", "");
                        
                        String insertCorporateMstGb = "";
                        String insertPersonMstGb = "";
                        
                        requestParamMap.put("comp_kor_nm_rp",  requestParamMap.get("comp_kor_nm").replaceAll("㈜", "(주)"));
                        Map<String, String> rsltProp = cstmrinqireDao.selectCorpSeqWithMap(requestParamMap);
                        requestParamMap.put("corp_seq",  requestParamMap.get("corp_seq"));
                        requestParamMap.put("ceo_update_yn",  requestParamMap.get("ceo_update_yn"));
                        
                        if ("0".equals(rsltProp.get("CORP_SEQ"))){
                            requestParamMap.put("comp_kor_nm_rp",  requestParamMap.get("comp_kor_nm").replaceAll("(주)","㈜"));
                            rsltProp = cstmrinqireDao.selectCorpSeqWithMap(requestParamMap);
                        }
                        
                        if ("0".equals(rsltProp.get("CORP_SEQ"))){
                            if ("N".equals(modify_yn)){  
                                insertCorporateMstGb = "skip";  //Y일때는 기존로직타고 N일때는 update 하지 않음
                            } else { 
                                insertCorporateMstGb = "update";
                            }
                        } else {
                            if ("".equals(requestParamMap.get("comp_no")) || ("".equals(requestParamMap.get("comp_kor_nm")) && "".equals(requestParamMap.get("comp_kor_ceo")))){
                                insertCorporateMstGb = "skip";
                            } else {
                                insertCorporateMstGb = "insert";
                            }
                        }
                        int personSeq = 0;
                        if ("insert".equals(insertCorporateMstGb)){
                            int corpSeq = cstmrinqireDao.selectCorpSeq();
                            requestParamMap.put("corp_seq", String.valueOf(corpSeq));
                            cstmrinqireDao.insertCorpMst(requestParamMap);
                            
                            if(requestParamMap.get("contact_email") != null && !"".equals(requestParamMap.get("contact_email"))){
                                int existCnt = cstmrinqireDao.getExistRejectMail(requestParamMap.get("contact_email"));
                                if("Y".equals(requestParamMap.get("email_share_yn"))){
                                    if(existCnt == 0) {
                                        HashMap<String, String> hm = new HashMap<String, String>();
                                        hm.put("email", requestParamMap.get("contact_email"));
                                        hm.put("name", requestParamMap.get("ceo_kor_nm"));
                                        cstmrinqireDao.insertRejectMail(hm);
                                    }
                                } else {
                                    if(existCnt > 0) {
                                        cstmrinqireDao.deleteRejectMail(requestParamMap.get("contact_email"));
                                    }
                                }
                            }
                        } else if ("update".equals(insertCorporateMstGb)){
                            cstmrinqireDao.updateCorpMst(requestParamMap);
                        }
                        personSeq = cstmrinqireDao.selectPersonSeqWithMap(requestParamMap);
                        if (!"0".equals(personSeq)){ 
                            if ("N".equals(modify_yn)){  //Y일때는 기존로직타고 N일때는 update 하지 않음
                                insertPersonMstGb = "skip";
                            } else { 
                                insertPersonMstGb = "update";
                            }
                        } else {
                            if (("".equals(requestParamMap.get("contact_kor_nm")) && "".equals(requestParamMap.get("contact_email"))) ||
                                ("".equals(requestParamMap.get("contact_kor_nm")) && "".equals(requestParamMap.get("contact_cell")))){
                                insertPersonMstGb = "skip";
                            } else {
                                insertPersonMstGb = "insert";
                            }
                        }
                        if ("insert".equals(insertPersonMstGb)){
                            personSeq = cstmrinqireDao.selectPersonSeq();
                            requestParamMap.put("person_seq", String.valueOf(personSeq));
                            cstmrinqireDao.insertPersonMst(requestParamMap);
                            
                            if(requestParamMap.get("contact_email") != null && !"".equals(requestParamMap.get("contact_email"))){
                                int existCnt = cstmrinqireDao.getExistRejectMail(requestParamMap.get("contact_email"));
                                if("Y".equals(requestParamMap.get("email_share_yn"))){
                                    if(existCnt == 0) {
                                        HashMap<String, String> hm = new HashMap<String, String>();
                                        hm.put("email", requestParamMap.get("contact_email"));
                                        hm.put("name", requestParamMap.get("ceo_kor_nm"));
                                        cstmrinqireDao.insertRejectMail(hm);
                                    }
                                } else {
                                    if(existCnt > 0) {
                                        cstmrinqireDao.deleteRejectMail(requestParamMap.get("contact_email"));
                                    }
                                }
                            }
                        } else if ("update".equals(insertPersonMstGb)){
                            requestParamMap.put("person_seq", String.valueOf(personSeq));
                            cstmrinqireDao.updatePersonMst(requestParamMap);
                        }
                        
                        if (personSeq != 0){
                            int countTemp = cstmrinqireDao.getDeptCustomer(requestParamMap);
                            if (countTemp == 0)
                                cstmrinqireDao.insertDeptCustomer(requestParamMap);
                        }
                    } // end for
                
                    String delete_yn = UtilManager.setChangeNull(requestParamMap.get("delete_yn"), "N");
                    requestParamMap.put("delete_yn", delete_yn);
                    cstmrinqireDao.setMarketingFolderExcel(requestParamMap);

                } catch (SQLException sqlexception) {
                    throw sqlexception;
                } catch (Exception exception) {
                    throw exception;
                } finally {
                    try {
                        if(workbook != null) workbook.close();
                    } catch (Exception e) {
                    }
                }
            }
            
            txManager.commit(status);
            ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        
        return ret;
    }
    
    public List<EgovMap> listMarketingFolderSql() throws Exception {
        EgovMap egov = cstmrinqireDao.marketingFolderSql();
        return cstmrinqireDao.listMarketingFolderSql(egov);
    }
    
    public List<EgovMap> getUserCodeList(String codeId) throws Exception {
        return cstmrinqireDao.getUserCodeList(codeId);
    }
    
    /**
     * <pre>
     * 개요 : 법인고객상세조회 CORP_SEQ로 무역업번호(MEMBER_ID) 가져오기
     * </pre>
     * @Method Name : getMemberId
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public String getMemberId(String corpSeq) throws Exception {
        return cstmrinqireDao.getMemberId(corpSeq);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 COMP_NO로 CORP_SEQ 가져오기
     * </pre>
     * @Method Name : getCorpSeq
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public String getCorpSeq(String compNo) throws Exception {
        return cstmrinqireDao.getCorpSeq(compNo);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 법인고객기본정보 상세
     * </pre>
     * @Method Name : selectCustomerInfoDetail
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public EgovMap selectCustomerInfoCustDetail(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCustDetail(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 소속지부 가져오기 2012.11.08-
     * </pre>
     * @Method Name : selectJibuInfo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public EgovMap selectJibuInfo(String cityCd) throws Exception {
        return cstmrinqireDao.selectJibuInfo(cityCd);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 동일법인번호목록 조회한다. 2012.10.16
     * </pre>
     * @Method Name : selectCustomerInfoFirmNo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoFirmNo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoFirmNo(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 법인직원고객
     * </pre>
     * @Method Name : selectCorporateStaffCustomerInfo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCorporateStaffCustomerInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCorporateStaffCustomerInfo(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 서비스정보
     * </pre>
     * @Method Name : selectCustomerInfoService
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoService(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        String [] serviceChk = new String[20] ;
        int s = 0;

        String initService = "004,009,017,003"; //초기값 콜센터상담, Kita.net서비스, 잡투게더, 무역기금
        
        if("".equals(cstmrReqDataVO.getServiceGbn())){
            String[] result = initService.split(",");
            for(int i=0; i<result.length; i++){
                serviceChk[s] = result[i];
                s++;
            }
        }else if("S".equals(cstmrReqDataVO.getServiceGbn())){
            if(!"".equals(cstmrReqDataVO.getServiceChkList1())){
                String [] result1 = cstmrReqDataVO.getServiceChkList1().split(",");
                for(int i=0; i<result1.length; i++){
                    serviceChk[s] = result1[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList2())){
                String [] result2 = cstmrReqDataVO.getServiceChkList2().split(",");
                for(int i=0; i<result2.length; i++){
                    serviceChk[s] = result2[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList3())){
                String [] result3 = cstmrReqDataVO.getServiceChkList3().split(",");
                for(int i=0; i<result3.length; i++){
                    serviceChk[s] = result3[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList4())){
                String [] result4 = cstmrReqDataVO.getServiceChkList4().split(",");
                for(int i=0; i<result4.length; i++){
                    serviceChk[s] = result4[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList5())){
                String [] result5 = cstmrReqDataVO.getServiceChkList5().split(",");
                for(int i=0; i<result5.length; i++){
                    serviceChk[s] = result5[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList7())){
                String [] result7 = cstmrReqDataVO.getServiceChkList7().split(",");
                
                for(int i=0; i<result7.length; i++){
                    serviceChk[s] = result7[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList8())){
                String [] result8 = cstmrReqDataVO.getServiceChkList8().split(",");
                
                for(int i=0; i<result8.length; i++){
                    serviceChk[s] = result8[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList9())){
                String [] result9 = cstmrReqDataVO.getServiceChkList9().split(",");
                
                for(int i=0; i<result9.length; i++){
                    serviceChk[s] = result9[i];
                    s++;
                }
            }
            if(!"".equals(cstmrReqDataVO.getServiceChkList10())){
                String [] result10 = cstmrReqDataVO.getServiceChkList10().split(",");
                
                for(int i=0; i<result10.length; i++){
                    serviceChk[s] = result10[i];
                    s++;
                }
            }
        }
        cstmrReqDataVO.setS(String.valueOf(s));
        cstmrReqDataVO.setServiceChk(serviceChk);
        return cstmrinqireDao.selectCustomerInfoService(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객 Contact 현황을 조회한다
     * </pre>
     * @Method Name : selectCustomerInfoContactStatus
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<DkMap> selectCustomerInfoContactStatus(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoContactStatus(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객상담정보
     * </pre>
     * @Method Name : selectCustomerInfoCustConsult
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<DkMap> selectCustomerInfoCustConsult(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCustConsult(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객회비납부정보를 조회한다
     * </pre>
     * @Method Name : selectCustomerInfoCFee
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoCustFee(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCustFee(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객재무정보를 조회한다
     * </pre>
     * @Method Name : selectCustomerInfCustFinance
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfCustFinance(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfCustFinance(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객투자정보를 조회한다
     * </pre>
     * @Method Name : selectCustomerInfoCustInvest
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoCustInvest(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCustInvest(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객취급상품정보를 조회한다
     * </pre>
     * @Method Name : selectCustomerInfoCustProduct
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoCustProduct(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCustProduct(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객수출입품목정보를 조회한다
     * </pre>
     * @Method Name : selectCustomerInfoCustTrade
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoCustTrade(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCustTrade(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 대표 아이디가져오기
     * </pre>
     * @Method Name : getPuserId
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public String getPuserId(String memberId) throws Exception {
        return cstmrinqireDao.getPuserId(memberId);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 마케팅구분이 대표자(004)인 목록 2012.11.06
     * </pre>
     * @Method Name : selectPersonContactList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectPersonContactList(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectPersonContactList(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 무역업번호 목록
     * </pre>
     * @Method Name : selectCorporateMemberId
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCorporateMemberId(String corpSeq) throws Exception {
        return cstmrinqireDao.selectCorporateMemberId(corpSeq);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 사업자번호 목록
     * </pre>
     * @Method Name : selectPersonContactList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCorporateCompno(String corpSeq) throws Exception {
        return cstmrinqireDao.selectCorporateCompno(corpSeq);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객회비납부정보
     * </pre>
     * @Method Name : selectCustomerInfoCustFee
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoCustFee(String customerId) throws Exception {
        return cstmrinqireDao.selectCustomerInfoCustFee(customerId);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 하위ID 대표ID 가져오기
     * </pre>
     * @Method Name : idInfoCustSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> idInfoCustSelect(String memberId) throws Exception {
        return cstmrinqireDao.idInfoCustSelect(memberId);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 고객상담정보
     * </pre>
     * @Method Name : selectCustomerInfoConsultDetail
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCustomerInfoConsultDetail(String reqId) throws Exception {
        return cstmrinqireDao.selectCustomerInfoConsultDetail(reqId);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 법인고객중복검색
     * </pre>
     * @Method Name : checkCustomerDuplicateByFunction
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int checkCustomerDuplicateByFunction(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.checkCustomerDuplicateByFunction(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 개인고객 등록
     * </pre>
     * @Method Name : insertCustomerInfo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int insertCustomerInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception{
        int ret = -1;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        try{
            int resultSetValue = cstmrinqireDao.selectCustomerSeq();
            cstmrReqDataVO.setCorpSeq(String.valueOf(resultSetValue));
            
            resultSetValue = cstmrinqireDao.selectCustomerSeq();
            cstmrReqDataVO.setPersonSeq(String.valueOf(resultSetValue));
            
            CorporateMstVO corporateMstVO = new CorporateMstVO();
            BeanUtils.copyProperties(corporateMstVO, cstmrReqDataVO);
            
            if(cstmrReqDataVO.getMainTelNo()!=null) corporateMstVO.setMainTelNoErms(cstmrReqDataVO.getMainTelNo().replaceAll("-", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll(" ", ""));
            if(cstmrReqDataVO.getMainFaxNo()!=null) corporateMstVO.setMainFaxNoErms(cstmrReqDataVO.getMainFaxNo().replaceAll("-", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll(" ", ""));
            if(cstmrReqDataVO.getbTelNo()!=null) corporateMstVO.setbTelNoErms(cstmrReqDataVO.getbTelNo().replaceAll("-", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll(" ", ""));
            if(cstmrReqDataVO.getbFaxNo()!=null) corporateMstVO.setbFaxNoErms(cstmrReqDataVO.getbFaxNo().replaceAll("-", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll(" ", ""));
            
            cstmrinqireDao.insertCustomerInfoCust(corporateMstVO); //CORPORATE_MST
            
            if(cstmrReqDataVO.getContactEmail() != null && !"".equals(cstmrReqDataVO.getContactEmail())){
                int existCnt = cstmrinqireDao.getExistRejectMail(cstmrReqDataVO.getContactEmail());
                if("Y".equals(corporateMstVO.getEmailShareYn())){
                    if(existCnt == 0) {
                        HashMap<String, String> hm = new HashMap<String, String>();
                        hm.put("email", cstmrReqDataVO.getContactEmail());
                        hm.put("name", cstmrReqDataVO.getCeoKorNm());
                        cstmrinqireDao.insertRejectMail(hm);
                    }
                } else {
                    if(existCnt > 0) {
                        cstmrinqireDao.deleteRejectMail(cstmrReqDataVO.getContactEmail());
                    }
                }
            }
            Map<String, Object> paramMap = new HashMap<String, Object>();
            Map<String, Object> personContactMap;
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getInterestCompanyYn())) {
                paramMap = new HashMap<String, Object>();
                
                List<Map<String, Object>> myInterestCustomer = new ArrayList<Map<String, Object>>();//personMstContact
                
                paramMap.put("loginUserId", cstmrReqDataVO.getLoginUserId());
                paramMap.put("customerKind", cstmrReqDataVO.getCustomerKind());
                paramMap.put("groupNm", cstmrReqDataVO.getGroupNm());
                String [] customerList = null;
                if(cstmrReqDataVO.getCheckedCustomerList()!=null) customerList = cstmrReqDataVO.getCheckedCustomerList().split(",");
                paramMap.put("memo", cstmrReqDataVO.getMemo());

                if(customerList==null) {
                    customerList = new String[1];
                    customerList[0] = cstmrReqDataVO.getCorpSeq();
                }
                
                for(String customer : customerList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("customer", customer);
                    myInterestCustomer.add(personContactMap);
                }
                
                paramMap.put("myInterestCustomer", myInterestCustomer);
                ret = indvdlcstmrregistDao.insertUpdateMyInterestCustomer(paramMap);
            }
            
            PersonMstVO personMstVO = new PersonMstVO();
            BeanUtils.copyProperties(personMstVO, cstmrReqDataVO);
            
            if(cstmrReqDataVO.getTelNo()!=null) personMstVO.setTelNoErms(cstmrReqDataVO.getTelNo().replaceAll("-", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll(" ", ""));
            if(cstmrReqDataVO.getFaxNo()!=null) personMstVO.setFaxNoErms(cstmrReqDataVO.getFaxNo().replaceAll("-", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll(" ", ""));
            if(cstmrReqDataVO.getCellNo()!=null) personMstVO.setCellNoErms(cstmrReqDataVO.getCellNo().replaceAll("-", "").replaceAll("\\(", "").replaceAll("\\)", "").replaceAll(" ", ""));

            cstmrinqireDao.insertCustomerInfo(personMstVO); //PSERSON_MST 
            
            // PSERSON_CONTACT에서 insert 인지 update인지 구분하기 위해 구분값 추가 2012.10.15
            IndvdlcstmrregistVO indvdlcstmrregistVO = new IndvdlcstmrregistVO();
            BeanUtils.copyProperties(indvdlcstmrregistVO, cstmrReqDataVO);
            indvdlcstmrregistVO.setTypeGubun("I");
            Vector<CustomerCode.contactCode> contactCodeList = new Vector<CustomerCode.contactCode>();
            
            if ("Y".equals(indvdlcstmrregistVO.getContactCd1())) {
                contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_001);
            }
            if ("Y".equals(indvdlcstmrregistVO.getContactCd2())) {
                contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_002);
            }
            if ("Y".equals(indvdlcstmrregistVO.getContactCd3())) {
                contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_003);
            }
            if ("Y".equals(indvdlcstmrregistVO.getContactCd4())) {
                contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_004);
            }
            if ("Y".equals(indvdlcstmrregistVO.getContactCd7())) {
                contactCodeList.add(CustomerCode.contactCode.CONTACT_CODE_007);
            }
            
            paramMap = new HashMap<String, Object>();
            
            List<Map<String, Object>> personContactForPrivate = new ArrayList<Map<String, Object>>();
            
            paramMap.put("loginUserId", indvdlcstmrregistVO.getLoginUserId());
            paramMap.put("personSeq", indvdlcstmrregistVO.getPersonSeq());
            
            if(contactCodeList!=null){
                for (CustomerCode.contactCode contactCode : contactCodeList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("contactCode", contactCode.getKey());
                    personContactForPrivate.add(personContactMap);
                }
            }
            
            if(personContactForPrivate.size()>0){
                paramMap.put("personContactForPrivate", personContactForPrivate);
                ret = indvdlcstmrregistDao.insertPersonContactForPrivate(paramMap);
            }
            
            
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getInterestPrivateYn())) {
                paramMap = new HashMap<String, Object>();
                
                List<Map<String, Object>> myInterestCustomer = new ArrayList<Map<String, Object>>();//personMstContact
                
                paramMap.put("loginUserId", cstmrReqDataVO.getLoginUserId());
                paramMap.put("customerKind", cstmrReqDataVO.getCustomerKind());
                paramMap.put("groupNm", cstmrReqDataVO.getGroupNm());
                String [] customerList = null;
                if(cstmrReqDataVO.getCheckedCustomerList()!=null) customerList = cstmrReqDataVO.getCheckedCustomerList().split(",");
                paramMap.put("memo", cstmrReqDataVO.getMemo());

                if(customerList==null) {
                    customerList = new String[1];
                    customerList[0] = cstmrReqDataVO.getPersonSeq();
                }
                
                for(String customer : customerList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("customer", customer);
                    myInterestCustomer.add(personContactMap);
                }
                
                paramMap.put("myInterestCustomer", myInterestCustomer);
                ret = indvdlcstmrregistDao.insertUpdateMyInterestCustomer(paramMap);
            }
            
            txManager.commit(status);
            ret = 1;
     } catch(TransactionException e){
         txManager.rollback(status);
         e.printStackTrace();
     } catch(Exception e){
         txManager.rollback(status);
         e.printStackTrace();
     } finally {
         if (!status.isCompleted()) {
             txManager.rollback(status);
         }
     }        
     return ret;
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 법인고객조회(팝업)
     * </pre>
     * @Method Name : selectCorporateCustomerInfo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectCorporateCustomerInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCorporateCustomerInfo(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 직원삭제
     * </pre>
     * @Method Name : deleteCorporateStaff
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int deleteCorporateStaff(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        
        Map<String, Object> paramMap = new HashMap<String, Object>();
        Map<String, Object> personSeqMap;
        
        paramMap = new HashMap<String, Object>();
        
        List<Map<String, Object>> personSeq = new ArrayList<Map<String, Object>>();
        
        paramMap.put("loginUserId", cstmrReqDataVO.getLoginUserId());
        String [] staffList = null;
        if(cstmrReqDataVO.getCheckedStaffList()!=null) staffList = cstmrReqDataVO.getCheckedStaffList().split(",");

        if(staffList==null) {
            staffList = new String[1];
            staffList[0] = cstmrReqDataVO.getPersonSeq();
        }
        
        for(String staff : staffList) {
            personSeqMap = new HashMap<String, Object>();
            personSeqMap.put("staff", staff);
            personSeq.add(personSeqMap);
        }
        
        paramMap.put("personSeq", personSeq);
        return cstmrinqireDao.deleteCorporateStaff(paramMap);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 사무소공장 상세 정보 조회(팝업)
     * </pre>
     * @Method Name : offAllInfoSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public EgovMap offAllInfoSelect(String seqNo) throws Exception {
        return cstmrinqireDao.offAllInfoSelect(seqNo);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 사무소공장등록
     * </pre>
     * @Method Name : offInfoInsert
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int offInfoInsert(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        int ret = -1;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        try{
            int seqNo = cstmrinqireDao.getSeqNumberOffice();
            cstmrReqDataVO.setSeqNo(String.valueOf(seqNo));
            ret = cstmrinqireDao.offInfoInsert(cstmrReqDataVO);
            if(ret == 1) cstmrinqireDao.offInfoProcedure(cstmrReqDataVO.getSeqNo());
    
            txManager.commit(status);
            ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        
         return ret;
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 사무소공장정보업데이트
     * </pre>
     * @Method Name : offInfoUpdate
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int offInfoUpdate(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.offInfoUpdate(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 해외지사 상세 정보 조회(팝업)
     * </pre>
     * @Method Name : forAllInfoSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public EgovMap forAllInfoSelect(String seqNo) throws Exception {
        return cstmrinqireDao.forAllInfoSelect(seqNo);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 해외지사등록
     * </pre>
     * @Method Name : forInfoInsert
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int forInfoInsert(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        int seqNo = cstmrinqireDao.getSeqNumber();
        cstmrReqDataVO.setSeqNo(String.valueOf(seqNo));
        return cstmrinqireDao.forInfoInsert(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 해외지사정보업데이트
     * </pre>
     * @Method Name : forInfoUpdate
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int forInfoUpdate(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.forInfoUpdate(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 해외지사 국가검색
     * </pre>
     * @Method Name : investCodeSearch
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> investCodeSearch(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.investCodeSearch(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 상세조회(수정) CORPORATE_MST
     * </pre>
     * @Method Name : memchInfoAllSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int updateCustomerInfoCust(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.updateCustomerInfoCust(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 상세조회(수정) 관심고객으로 등록한 사용자목록을 조회한다
     * </pre>
     * @Method Name : selectInterestUserList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> selectInterestUserList(String customerSeq) throws Exception {
        return cstmrinqireDao.selectInterestUserList(customerSeq);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 상세조회(수정)
     * </pre>
     * @Method Name : selectCustomerInfoDetailCust
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public EgovMap selectCustomerInfoDetailCust(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectCustomerInfoDetailCust(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 상세조회(수정)
     * </pre>
     * @Method Name : updateCustomerInfo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int updateCustomerInfo(CstmrReqDataVO cstmrReqDataVO) throws Exception{
        int ret = -1;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        try{
            
            cstmrReqDataVO.setFirmNo(cstmrReqDataVO.getFirmNo1() + cstmrReqDataVO.getFirmNo2());
            if(cstmrReqDataVO.getFoundYyyymmdd()!=null) cstmrReqDataVO.setFoundYyyymmdd(cstmrReqDataVO.getFoundYyyymmdd().replaceAll("-", ""));
            
            cstmrinqireDao.updateCustomerInfoCust(cstmrReqDataVO);
            
            Map<String, Object> paramMap = new HashMap<String, Object>();
            Map<String, Object> personContactMap;
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getInterestYn())) {
                paramMap = new HashMap<String, Object>();
                
                List<Map<String, Object>> myInterestCustomer = new ArrayList<Map<String, Object>>();//personMstContact
                
                paramMap.put("loginUserId", cstmrReqDataVO.getLoginUserId());
                paramMap.put("customerKind", cstmrReqDataVO.getCustomerKind());
                paramMap.put("groupNm", cstmrReqDataVO.getGroupNm());
                String [] customerList = null;
                if(cstmrReqDataVO.getCheckedCustomerList()!=null) customerList = cstmrReqDataVO.getCheckedCustomerList().split(",");
                paramMap.put("memo", cstmrReqDataVO.getMemo());

                if(customerList==null) {
                    customerList = new String[1];
                    customerList[0] = cstmrReqDataVO.getCorpSeq();
                }
                
                for(String customer : customerList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("customer", customer);
                    myInterestCustomer.add(personContactMap);
                }
                
                paramMap.put("myInterestCustomer", myInterestCustomer);
                ret = indvdlcstmrregistDao.insertUpdateMyInterestCustomer(paramMap);
            } else {
                paramMap = new HashMap<String, Object>();
                
                List<Map<String, Object>> customerSeq = new ArrayList<Map<String, Object>>();
                
                paramMap.put("userId", cstmrReqDataVO.getLoginUserId());
                String [] intrestCustomerList = null;
                if(cstmrReqDataVO.getCheckedCustomerList()!=null) intrestCustomerList = cstmrReqDataVO.getCheckedCustomerList().split(",");
                //paramMap.put("memo", cstmrIndividualCustomerVO.getMemo());
    
                if(intrestCustomerList==null) {
                    intrestCustomerList = new String[1];
                    intrestCustomerList[0] = cstmrReqDataVO.getCustomerSeq();
                }
                
                for(String customer : intrestCustomerList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("customer", customer);
                    customerSeq.add(personContactMap);
                }
                
                paramMap.put("customerSeq", customerSeq);
                cstmrinqireDao.deleteMyInterestCustomer(paramMap);
            }
            
            String rejectId = "";
            String contactNm = "";
            String corpKorNm = "";
            
            if(CustomerCode.CUSTOMER_KIND_PRIVATE.equals(cstmrReqDataVO.getCustomerKind())) {
                rejectId = cstmrReqDataVO.getPersonSeq();
                contactNm =  cstmrReqDataVO.getPersonNm();
            }
            else if(CustomerCode.CUSTOMER_KIND_COMPANY.equals(cstmrReqDataVO.getCustomerKind())) {
                rejectId = cstmrReqDataVO.getCustomerSeq();
                corpKorNm = cstmrReqDataVO.getCorpKorNm();
            }
            
            //Tel
            List<String> telList = new ArrayList<String>();
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getTelShareYn())) {
                telList.add(cstmrReqDataVO.getTelNo());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getTelShareYn2())) {
                telList.add(cstmrReqDataVO.getTelNo2());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getTelShareYn3())) {
                telList.add(cstmrReqDataVO.getTelNo3());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getTelShareYn4())) {
                telList.add(cstmrReqDataVO.getTelNo4());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getTelShareYn5())) {
                telList.add(cstmrReqDataVO.getTelNo5());
            }
            //Call
            List<String> cellList = new ArrayList<String>();
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getCellShareYn())) {
               cellList.add(cstmrReqDataVO.getCellNo());
            }
            //Email
            List<String> emailList = new ArrayList<String>();
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getEmailShareYn())) {
               emailList.add(cstmrReqDataVO.getPersonEmail());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getEmailShareYn2())) {
                emailList.add(cstmrReqDataVO.getPersonEmail02());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getEmailShareYn3())) {
                emailList.add(cstmrReqDataVO.getPersonEmail3());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getEmailShareYn4())) {
                emailList.add(cstmrReqDataVO.getPersonEmail4());
            }
            if(CustomerCode.VALUE_YES.equals(cstmrReqDataVO.getEmailShareYn5())) {
                emailList.add(cstmrReqDataVO.getPersonEmail5());
            }
            
            paramMap = new HashMap<String, Object>();
            
            List<Map<String, Object>> tReject = new ArrayList<Map<String, Object>>();
            paramMap.put("rejectId", rejectId);
            paramMap.put("corpKorNm", corpKorNm);
            paramMap.put("contactNm", contactNm);
            if(emailList!=null){
                for (String email : emailList) {
                    personContactMap = new HashMap<String, Object>();
                    personContactMap.put("media", email);
                    personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_EMAIL);
                    tReject.add(personContactMap);
               }
            }
            if(telList!=null){
               for (String tel : telList) {
                   personContactMap = new HashMap<String, Object>();
                   personContactMap.put("media", tel);
                   personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_PHONE);
                   tReject.add(personContactMap);
               }
            }
            if(cellList!=null){
               for (String cell : cellList) {
                   personContactMap = new HashMap<String, Object>();
                   personContactMap.put("media", cell);
                   personContactMap.put("mediaCode", CustomerCode.REJECT_MEDIA_CODE_CELL);
                   tReject.add(personContactMap);
               }
            }
            
           if(tReject.size()>0){
               paramMap.put("tReject", tReject);
                ret = cstmrinqireDao.deleteTReject(rejectId);
                ret = cstmrinqireDao.insertUpdateTReject(paramMap);
            }
    
            txManager.commit(status);
            ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        
         return ret;
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 정보변경이력
     * </pre>
     * @Method Name : memchInfoSelectpo
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> memchInfoSelectpo(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.memchInfoSelectpo(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 정보변경이력상세
     * </pre>
     * @Method Name : memchInfoAllSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> memchInfoAllSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.memchInfoAllSelect(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 3개월간 총건수
     * </pre>
     * @Method Name : getAllCount
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public EgovMap getAllCount(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.getAllCount(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 3개월간 서비스이용
     * </pre>
     * @Method Name : serInfoSelect3Mon
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> serInfoSelect3Mon(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.serInfoSelect3Mon(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 3개월간 정보변경
     * </pre>
     * @Method Name : memchInfoSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> memchInfoSelect(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.memchInfoSelect(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 3개월간 마케팅
     * </pre>
     * @Method Name : getCustMarketingList3Mon
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> getCustMarketingList3Mon(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.getCustMarketingList3Mon(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 3개월간 고객응대
     * </pre>
     * @Method Name : memchInfoSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public List<EgovMap> custInfoSelect3Mon(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.custInfoSelect3Mon(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 고객정보에반영
     * </pre>
     * @Method Name : appSyncMemToCust
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int appSyncMemToCust(String memberId) throws Exception {
        return cstmrinqireDao.appSyncMemToCust(memberId);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 고객응대등록
     * </pre>
     * @Method Name : custInfoInsert
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int custInfoInsert(CstmrReqDataVO cstmrReqDataVO) throws Exception{
        int ret = -1;
        
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        
        boolean a = false;
        int i = 0;
        int j = 0;
        int k = 0;
        int l = 0;
        int m = 0;
        int n = 0;
        int ii = 0;
        
        try{
            
            EgovMap resultValue = cstmrinqireDao.custCodeSearch(cstmrReqDataVO.getReqTp());

            if(resultValue.get("codeName")!=null) cstmrReqDataVO.setCodeName(resultValue.get("codeName").toString());
            String MEMBER_ID = cstmrReqDataVO.getMemberId();
            
            if ("guest".equals(cstmrReqDataVO.getCaerId())) {
                cstmrReqDataVO.setCaerId(cstmrReqDataVO.getMemberId());
            }
            
            if ("".equals(cstmrReqDataVO.getCaerId())) {
                cstmrReqDataVO.setCaerId(cstmrReqDataVO.getMemberId());
            }
            
            int CAER_ID_NO = cstmrinqireDao.getIdNumber(cstmrReqDataVO.getCaerId());
            
            int REQ_ID = cstmrinqireDao.getReqNumber();
            cstmrReqDataVO.setReqId(String.valueOf(REQ_ID));
            int ANSWER_ID = cstmrinqireDao.getAnswerNumber();
            cstmrReqDataVO.setAnswerId(String.valueOf(ANSWER_ID));
            int SEQ_NO = cstmrinqireDao.getSeqNumber();
            cstmrReqDataVO.setSeqNo(String.valueOf(SEQ_NO));

            if (CAER_ID_NO > 0) {
                j = cstmrinqireDao.custInfoInsert2(cstmrReqDataVO);
            } else {
                i = cstmrinqireDao.custInfoInsert1(cstmrReqDataVO);
            }
            if (i > 0) {
                j = cstmrinqireDao.custInfoInsert2(cstmrReqDataVO);
            }
            if (j > 0) {
                if(cstmrReqDataVO.getAnswerDt()!=null) cstmrReqDataVO.setAnswerDt(cstmrReqDataVO.getAnswerDt().replaceAll("-", ""));
                k = cstmrinqireDao.custInfoInsert3(cstmrReqDataVO);
            }
            if (k > 0) {
                if(cstmrReqDataVO.getAnswerDt()!=null) cstmrReqDataVO.setAnswerDt(cstmrReqDataVO.getAnswerDt().replaceAll("-", ""));
                l = cstmrinqireDao.custInfoInsert4(cstmrReqDataVO);
            }
            if (l > 0) {
                if("1".equals(cstmrReqDataVO.getMemberGbn()) || "7".equals(cstmrReqDataVO.getMemberGbn()) || "8".equals(cstmrReqDataVO.getMemberGbn()))
                    cstmrReqDataVO.setUserFg("1");
                else cstmrReqDataVO.setUserFg("2");
                m = cstmrinqireDao.cunsultInfoInsert(cstmrReqDataVO);
            }
            if (m > 0) {
                if ("0334".equals(cstmrReqDataVO.getReqTp()) || "0336".equals(cstmrReqDataVO.getReqTp()) || "0338".equals(cstmrReqDataVO.getReqTp()) || "0339".equals(cstmrReqDataVO.getReqTp()) || "03310".equals(cstmrReqDataVO.getReqTp()) || "03317".equals(cstmrReqDataVO.getReqTp())) {
                    n = cstmrinqireDao.postReturnUpdate(cstmrReqDataVO);
                } else {
                    n = 1;
                }
            }
            if (n > 0) a = true;

            if (a == true) ii = 1;
            txManager.commit(status);
            ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        
         return ii;
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 고객응대 등록  USER ID 검색
     * </pre>
     * @Method Name : idDouSelect
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int idDouSelect(String memberId) throws Exception {
        return cstmrinqireDao.idDouSelect(memberId);
    }
    /**
     * <pre>
     * 개요 : 법인고객상세조회 회원정보보기 USER_TEMP_INFO ID 승인시 Kobz_member_t 에 넘겨줌
     * </pre>
     * @Method Name : KobzMemIns
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */ 
    public int KobzMemIns(CstmrReqDataVO cstmrReqDataVO) throws Exception{
        int ret = -1;
        /*
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);    

        TransactionStatus status = txManager.getTransaction(def);
        
        int i = 0;
        int USER_ID_CNT = 0;
        String FEE_GB = "";
        String FEE_STATUS = "";
        int UG_USER_ID_CNT = 0;
        
        try{
            USER_ID_CNT = cstmrinqireDao.KobzIdList(cstmrReqDataVO);
            prop.setProperty("COMPANY_KOR", String.valueOf(COMPANY_KOR));
            prop.setProperty("MEMBER_GBN", String.valueOf(MEMBER_GBN));

            if (USER_ID_CNT <= 0) { //신규 데이터 라면
                String strOs = System.getProperty("os.name"); //시스템 OS
                if(strOs.indexOf("NT") > -1 || strOs.toLowerCase().indexOf("windows") > -1){
                    //"KOBZ_MEMBER_T@MEMBER 테스트 중 입력하지 않음";
                }else{
                    if (KMDS_USER_GUBUN.equals("04")) { // 고객구분이 04(대표ID) 일 경우
                        i = cstmrinqireDao.KobzMemIns04(cstmrReqDataVO);
                        i = cstmrinqireDao.KobzUserGradeIns(cstmrReqDataVO);
                    } else if (KMDS_USER_GUBUN.equals("05")) { // 고객구분이 05(일반ID) 일 경우
                        i = cstmrinqireDao.KobzMemIns05(cstmrReqDataVO);
                    }
                }
            } else {
                if (KMDS_USER_GUBUN.equals("04")) {
                    FEE_GB = cstmrinqireDao.KobzFeeGb(cstmrReqDataVO);
                    FEE_STATUS = cstmrinqireDao.KobzFeeStatus(cstmrReqDataVO);
                    prop.setProperty("FEE_STATUS", String.valueOf(FEE_STATUS));
                    i = cstmrinqireDao.KobzMemUpd04Y(cstmrReqDataVO);
                    UG_USER_ID_CNT = cstmrinqireDao.KobzUGIdList(cstmrReqDataVO);
                    if (UG_USER_ID_CNT > 0) { // 사용자가 기존에 있다면 UPDATE
                        i = cstmrinqireDao.KobzUserGradeUpd(cstmrReqDataVO);
                    } else { // 사용자가 기존에 없다면 INSERT
                        i = cstmrinqireDao.KobzUserGradeIns(cstmrReqDataVO);
                    }
                } else if (KMDS_USER_GUBUN.equals("05")) {
                    FEE_STATUS = cstmrinqireDao.KobzFeeStatus(cstmrReqDataVO);
                    if (FEE_STATUS.equals("Y")) { //유료 사용자인 경우
                        i = cstmrinqireDao.KobzMemUpd04Y(cstmrReqDataVO);  // 04 처리와 동일한 메소드 사용
                        UG_USER_ID_CNT = cstmrinqireDao.KobzUGIdList(cstmrReqDataVO);
                        if (UG_USER_ID_CNT != 0) { // 사용자가 기존에 있다면 UPDATE
                            i = cstmrinqireDao.KobzUserGradeUpd(cstmrReqDataVO);
                        } else if (UG_USER_ID_CNT == 0) { // 사용자가 기존에 없다면 INSERT
                            i = cstmrinqireDao.KobzUserGradeIns(cstmrReqDataVO);
                        }
                    } else { // 무료 사용자인 경우
                        i = cstmrinqireDao.KobzMemUpd05N(cstmrReqDataVO);
                    }
                }
            }
        
        
        
        
            txManager.commit(status);
            ret = 1;
         } catch(TransactionException e){
             txManager.rollback(status);
             e.printStackTrace();
         } catch(Exception e){
             txManager.rollback(status);
             e.printStackTrace();
         } finally {
             if (!status.isCompleted()) {
                 txManager.rollback(status);
             }
         }        */
         return ret;
        
    }
    /**
     * <pre>
     * 개요 : 추천 비추천 여부 검색
     * </pre>
     * @Method Name : countRecommenderId
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int countRecommenderId(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.countRecommenderId(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 추천 비추천 여부 등록
     * </pre>
     * @Method Name : insertRecommendationCust
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public int insertRecommendationCust(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.insertRecommendationCust(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 추천 비추천 리스트
     * </pre>
     * @Method Name : selectRecommendList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> selectRecommendList(CstmrReqDataVO cstmrReqDataVO) throws Exception {
        return cstmrinqireDao.selectRecommendList(cstmrReqDataVO);
    }
    /**
     * <pre>
     * 개요 : 빅데이터 마스터 대상 리스트를 조회한다
     * </pre>
     * @Method Name : getTrgetslctnInqireBigdataList
     * @author : dkcns
     * @date : 2017. 8. 18.
     * @param cstmrReqDataVO
     * @return
     * @throws Exception
     */  
    public List<EgovMap> getTrgetslctnInqireBigdataList(IndividualCstmrinqireVO individualCstmrinqireVO) throws Exception {
        return cstmrinqireDao.getTrgetslctnInqireBigdataList(individualCstmrinqireVO);
    }
}
